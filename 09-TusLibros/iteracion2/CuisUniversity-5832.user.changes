

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (3 June 2023 23:52:07) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


----End fileIn of /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/repoMateria/2023-1c/08-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/3/2023 23:53:06'!
PASSED!

----QUIT----(3 June 2023 23:53:11) CuisUniversity-5832.image priorSource: 9366758!

----STARTUP---- (4 June 2023 14:21:39) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


Object subclass: #LogAndWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogAndWindowTest category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:29:19'!
Object subclass: #LogAndWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:31:43'!
Object subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'nil' stamp: 'FP 6/4/2023 14:31:38'!
test01PositionLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: positionLogTracer log.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:31:58'!
PASSED!

TestCase subclass: #LogAndWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogAndWindowTest category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:32:17'!
TestCase subclass: #LogAndWindowTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:32:19'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:32:19'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:32:19'!
ERROR!
!MarsRoverPositionLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 14:32:28'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!MarsRoverPositionLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 14:32:37' prior: 50625078!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:32:39'!
ERROR!

!classDefinition: #MarsRoverPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:34:40'!
Object subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:34:40'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!MarsRoverPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:34:45' prior: 50625104!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:34:45'!
ERROR!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:35:00'!
log
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:36:01'!
Object subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: 'marsRover positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:36:00' prior: 50625119!
log
	
	^positionLog! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:36:03'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:36:05'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:36:13'!
PASSED!

!classDefinition: #MarsRoverPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:38:03'!
Object subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:37:59'!
test02PositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow windowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	windowTracer := MarsRoverPositionWindowTracer with: marsRover.
	
	initialWindow := windowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: windowTracer window.! !

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:38:09'!
ERROR!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:38:09'!
ERROR!
!MarsRoverPositionWindowTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 14:38:14'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!MarsRoverPositionWindowTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 14:38:19' prior: 50625178!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:38:20'!
ERROR!

!classDefinition: #MarsRoverPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:38:24'!
Object subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:38:24'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!MarsRoverPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:38:27' prior: 50625205!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:38:30'!
ERROR!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:38:37'!
window
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:38:47'!
Object subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: 'marsRover positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:38:46' prior: 50625220!
window
	
	^positionWindow! !

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:38:49'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:38:50'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:38:50'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:40:30'!
test03PositionLogAddsNewPositionWithForwardCommand 

	|marsRover positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
		
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: positionLogTracer log.! !

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:40:32'!
FAILURE!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:40:32'!
FAILURE!
!MarsRoverPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:41:08' prior: 50625110!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	positionLog := OrderedCollection new.! !
!MarsRoverPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:41:29' prior: 50625324!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	positionLog := OrderedCollection new.
	
	aMarsRover addPositionLogTracer: self! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:41:37'!
ERROR!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:41:37'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:41:37'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:41:39'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:41:43'!
addPositionLogTracer: aMarsRoverPositionLogTracer 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:42:06'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLogTracer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:42:04' prior: 50625406!
addPositionLogTracer: aMarsRoverPositionLogTracer 
	
	positionLogTracer := aMarsRoverPositionLogTracer ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:42:07'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:42:09'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:42:39' prior: 50624617!
moveForward
	
	head moveForward.
	
	positionLogTracer addPosition: position ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:42:43'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:42:43'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:42:43'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:42:43'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:42:43'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:42:43'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:42:43'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:42:45'!
ERROR!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:42:49'!
addPosition: aPosition 
	self shouldBeImplemented.! !
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:42:57' prior: 50625508!
addPosition: aPosition 
	
	positionLog add: aPosition ! !

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:42:58'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:01'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:43:01'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:43:01'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:43:01'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:43:01'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:43:01'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:03'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:43:53' prior: 50625434!
moveForward
	
	head moveForward.
	
	positionLogTracer isNil ifTrue: [positionLogTracer addPosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:43:55'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:55'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:43:55'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:43:55'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:43:55'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:43:55'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:43:55'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:43:56'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:44:07' prior: 50625591!
moveForward
	
	head moveForward.
	
	positionLogTracer isNil ifFalse: [positionLogTracer addPosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:44:08'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:44:08'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:44:28' prior: 50625666!
moveForward
	
	head moveForward.
	
	positionLogTracer ifNotNil: [positionLogTracer addPosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:44:29'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:44:29'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:45:59'!
test04PositionWindowShowsNewPositionWithForwardCommand

	|marsRover positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.	
	positionWindowTracer := MarsRoverPositionWindowTracer with: marsRover.
		
	marsRover process: 'f'.
	
	self assert: (1@2) asString equals: positionWindowTracer window .! !

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:46:06'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:46:06'!
FAILURE!
!MarsRoverPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:47:54' prior: 50625211!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	
	positionWindow := ''! !
!MarsRoverPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 14:49:05' prior: 50625830!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	positionWindow := ''.
	
	aMarsRover addPositionWindowTracer: self! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:49:08'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:49:08'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:49:08'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:49:09'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:49:14'!
addPositionWindowTracer: aMarsRoverPositionWindowTracer 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 14:49:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionLogTracer positionWindowTracer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:49:27' prior: 50625915!
addPositionWindowTracer: aMarsRoverPositionWindowTracer 

	positionWindowTracer := aMarsRoverPositionWindowTracer ! !

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:49:30'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:49:31'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:51:50' prior: 50625737!
moveForward
	
	head moveForward.
	
	positionLogTracer ifNotNil: [positionLogTracer addPosition: position].
	positionWindowTracer ifNotNil: [positionWindowTracer updatePosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:51:58'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:51:58'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:51:58'!
ERROR!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:52:12'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:52:12'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:52:12'!
ERROR!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:52:16'!
updatePosition: aPosition 
	self shouldBeImplemented.! !
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:52:23' prior: 50626098!
updatePosition: aPosition 
	
	positionWindow := aPosition ! !

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:52:24'!
FAILURE!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:53:03'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:53:03'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:53:03'!
FAILURE!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:53:53'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:53:53'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:53:53'!
FAILURE!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:55:22' prior: 50626104!
updatePosition: aPosition 
	
	positionWindow := aPosition asString! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:55:23'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:55:23'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:56:06'!
test05PositionLogAddsNewPositionWithBackwardCommand 

	|marsRover positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
		
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 1@0) equals: positionLogTracer log.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:56:07'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:56:07'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:56:07'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:56:26' prior: 50624609!
moveBackward
	
	head moveBackward.
	
	positionLogTracer ifNotNil: [positionLogTracer addPosition: position].! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:56:28'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:56:28'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 14:56:55'!
test06PositionWindowShowsNewPositionWithBackwardCommand

	|marsRover positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.	
	positionWindowTracer := MarsRoverPositionWindowTracer with: marsRover.
		
	marsRover process: 'b'.
	
	self assert: (1@0) asString equals: positionWindowTracer window .! !

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:56:59'!
FAILURE!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:56:59'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 14:57:13' prior: 50626422!
moveBackward
	
	head moveBackward.
	
	positionLogTracer ifNotNil: [positionLogTracer addPosition: position].
	positionWindowTracer ifNotNil: [positionWindowTracer updatePosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 14:57:14'!
PASSED!

----SNAPSHOT----(4 June 2023 14:57:25) CuisUniversity-5832.image priorSource: 9384294!

Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:01:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:01:13' prior: 50624557!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	
	observers := OrderedCollection new.! !
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:02:09'!
updatePosition: aPosition 
	
	positionLog add: aPosition ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:02:09' prior: 50626522!
moveBackward
	
	head moveBackward.
	
	positionLogTracer ifNotNil: [positionLogTracer updatePosition: position].
	positionWindowTracer ifNotNil: [positionWindowTracer updatePosition: position]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:02:09' prior: 50625944!
moveForward
	
	head moveForward.
	
	positionLogTracer ifNotNil: [positionLogTracer updatePosition: position].
	positionWindowTracer ifNotNil: [positionWindowTracer updatePosition: position]! !

!methodRemoval: MarsRoverPositionLogTracer #addPosition: stamp: 'FP 6/4/2023 15:02:09'!
addPosition: aPosition 
	
	positionLog add: aPosition !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 15:02:27' prior: 50626645!
moveForward
	
	head moveForward.
	
	observers do: [:anObserver | anObserver updatePosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:29'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:29'!
FAILURE!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:02:29'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:30'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/4/2023 15:02:50' prior: 50626636!
moveBackward
	
	head moveBackward.
	
	observers do: [:anObserver | anObserver updatePosition: position]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:51'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:51'!
FAILURE!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:02:51'!
FAILURE!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:02:51'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:02:51'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:52'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:02:58'!
FAILURE!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:03:15'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:03:15'!
FAILURE!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:03:15'!
FAILURE!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:03:15'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:03:15'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:03:17'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:03:25'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:03:47'!
addObserver: anObserver 

	observers add: anObserver ! !
!MarsRoverPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:03:59' prior: 50625331!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	positionLog := OrderedCollection new.
	
	aMarsRover addObserver: self! !
!MarsRoverPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:04:03' prior: 50625836!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	positionWindow := ''.
	
	aMarsRover addObserver: self! !

!methodRemoval: MarsRover #addPositionLogTracer: stamp: 'FP 6/4/2023 15:04:08'!
addPositionLogTracer: aMarsRoverPositionLogTracer 
	
	positionLogTracer := aMarsRoverPositionLogTracer !

!methodRemoval: MarsRover #addPositionWindowTracer: stamp: 'FP 6/4/2023 15:04:09'!
addPositionWindowTracer: aMarsRoverPositionWindowTracer 

	positionWindowTracer := aMarsRoverPositionWindowTracer !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:04:10'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:04:17'!
PASSED!

!classDefinition: #MarsRoverHeadingLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:05:51'!
Object subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:05:46'!
test07HeadingLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
	
	initialLog := headingLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:00'!
ERROR!
!MarsRoverHeadingLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 15:06:06'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!MarsRoverHeadingLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 15:06:11' prior: 50627132!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:12'!
ERROR!

!classDefinition: #MarsRoverHeadingLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:06:18'!
Object subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:06:18'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!MarsRoverHeadingLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:06:30' prior: 50627158!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	! !

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:30'!
ERROR!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:06:36'!
log
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverHeadingLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:06:45'!
Object subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: 'marsRover headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:06:44' prior: 50627173!
log
	
	^headingLog! !

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:47'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:06:50'!
PASSED!

!classDefinition: #MarsRoverHeadingWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:07:36'!
Object subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:07:33'!
test0HeadingWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
	
	initialWindow := headingWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:07:42'!
test08HeadingWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
	
	initialWindow := headingWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingWindowTracer window.! !

!methodRemoval: LogAndWindowTest #test0HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:07:42'!
test0HeadingWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
	
	initialWindow := headingWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingWindowTracer window.!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:07:44'!
ERROR!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:07:44'!
ERROR!
!MarsRoverHeadingWindowTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 15:07:47'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!MarsRoverHeadingWindowTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 15:07:50' prior: 50627362!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:07:51'!
ERROR!

!classDefinition: #MarsRoverHeadingWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:07:54'!
Object subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:07:54'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!MarsRoverHeadingWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:07:56' prior: 50627389!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:07:57'!
ERROR!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:08:00'!
window
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverHeadingWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 15:08:10'!
Object subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: 'marsRover headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:08:09' prior: 50627404!
window
	
	^headingWindow! !

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:08:11'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:08:13'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:08:13'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:09:45'!
test03HeadingLogAddsNewHeadingWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:09:53'!
test09HeadingLogAddsNewHeadingWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test03HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:09:53'!
test03HeadingLogAddsNewHeadingWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:09:55'!
FAILURE!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:09:55'!
FAILURE!
!MarsRoverHeadingLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:10:25' prior: 50627164!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	
	headingLog := OrderedCollection new.
	! !
!MarsRoverHeadingLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:10:34' prior: 50627559!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	headingLog := OrderedCollection new.
	
	aMarsRover addObserver: self
	! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/4/2023 15:16:09' prior: 50624579!
rotateLeft
	
	head rotateLeft.
	
	head updateObservers! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:16:12'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:16:12'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:16:12'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:16:12'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:16:12'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:16:12'!
ERROR!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:16:14'!
ERROR!
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:16:24'!
updateObservers
	self shouldBeImplemented.! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:16:46' prior: 50627669!
updateObservers
	
	marsRover updateObserversWhenHeadingWest! !

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:16:48'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:16:53'!
updateObserversWhenHeadingWest
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:17:48' prior: 50627683!
updateObserversWhenHeadingWest
	
	observers do: [:anObserver | anObserver updateWhenHeadingWest]! !

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:17:51'!
ERROR!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:17:55'!
updateWhenHeadingWest
	self shouldBeImplemented.! !
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:18:49' prior: 50627698!
updateWhenHeadingWest
	
	headingLog add: 'Apuntando al Oeste'! !

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:18:50'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:19:04'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:19:04'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:19:04'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:19:04'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:19:05'!
ERROR!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:19:38'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:19:43'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:19:43'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:19:43'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:19:43'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:19:48'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:19:56'!
ERROR!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:20:21'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:20:21'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:20:21'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:20:21'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:20:23'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:23:02'!
ERROR!
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:23:09'!
updateObservers
	self shouldBeImplemented.! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:23:14' prior: 50627993!
updateObservers
	! !

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:23:16'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:23:17'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:23:21'!
updateObservers
	self shouldBeImplemented.! !
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:23:23' prior: 50628010!
updateObservers
! !

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:23:24'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:23:26'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:23:29'!
updateObservers
	self shouldBeImplemented.! !

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:23:50'!
ERROR!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:24:04' prior: 50628027!
updateObservers
	! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:24:07'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:24:07'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:24:46'!
test09HeadingLogAddsNewHeadingWithRotateLeftCommandWhenHeadingEast

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommand stamp: 'FP 6/4/2023 15:24:46'!
test09HeadingLogAddsNewHeadingWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.!

----SNAPSHOT----(4 June 2023 15:24:49) CuisUniversity-5832.image priorSource: 9438602!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:26:12'!
test09HeadingLogAddsHeadingWestWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test09HeadingLogAddsNewHeadingWithRotateLeftCommandWhenHeadingEast stamp: 'FP 6/4/2023 15:26:12'!
test09HeadingLogAddsNewHeadingWithRotateLeftCommandWhenHeadingEast

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:26:44'!
test10HeadingLogAddsHeadingSouthWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Sur') equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:26:47'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:26:47'!
FAILURE!
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:27:08' prior: 50628036!
updateObservers
	
	marsRover updateObserversWhenHeadingSouth! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:27:10'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:27:10'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:27:10'!
ERROR!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:27:12'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:27:16'!
updateObserversWhenHeadingSouth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:31:54' prior: 50628309!
updateObserversWhenHeadingSouth
	
	observers do: [:anObserver | anObserver updateWhenHeadingSouth ]! !

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:31:57'!
ERROR!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:32:00'!
updateWhenHeadingSouth
	self shouldBeImplemented.! !
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:32:20' prior: 50628324!
updateWhenHeadingSouth
	
	headingLog add: 'Apuntando al Sur'! !

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:32:22'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:32:24'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:32:26'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:32:26'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:32:57'!
test11HeadingLogAddsHeadingEastWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:32:59'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:32:59'!
FAILURE!
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:33:18' prior: 50628015!
updateObservers

	marsRover updateObserversWhenHeadingEast! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:33:20'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:33:20'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:33:20'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:33:22'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:33:26'!
updateObserversWhenHeadingEast
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:33:43' prior: 50628560!
updateObserversWhenHeadingEast
	
	observers do: [:anObserver | anObserver updateWhenHeadingEast]! !

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:33:45'!
ERROR!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:33:50'!
updateWhenHeadingEast
	self shouldBeImplemented.! !
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:34:04' prior: 50628575!
updateWhenHeadingEast
	
	headingLog add: 'Apuntando al Este'! !

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:34:05'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:34:06'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:34:28'!
test12HeadingLogAddsHeadingNorthWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Norte') equals: headingLogTracer log.! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:34:40' prior: 50627998!
updateObservers
	
	marsRover updateObserversWhenHeadingNorth! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:34:42'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:34:42'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:34:42'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:34:44'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:34:47'!
updateObserversWhenHeadingNorth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:35:01' prior: 50628715!
updateObserversWhenHeadingNorth
	
	observers do: [:anObserver | anObserver updateWhenHeadingSouth ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:35:08' prior: 50628720!
updateObserversWhenHeadingNorth
	
	observers do: [:anObserver | anObserver updateWhenHeadingNorth]! !

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:35:10'!
ERROR!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:35:17'!
updateWhenHeadingNorth
	self shouldBeImplemented.! !
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:35:28' prior: 50628737!
updateWhenHeadingNorth
	
	headingLog add: 'Apuntando al Norte'! !

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:35:29'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:35:30'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:38:21'!
test13HeadingLogAddsHeadingsWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:38:22'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:38:22'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'FP 6/4/2023 15:38:45' prior: 50624583!
rotateRight
	
	head rotateRight.
	
	head updateObservers ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:38:47'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:38:47'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:41:57'!
test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:41:59'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:41:59'!
FAILURE!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:42:19' prior: 50628891!
test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: headingWindowTracer log.! !

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:20'!
ERROR!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:20'!
ERROR!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:42:28' prior: 50628913!
test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: headingWindowTracer window .! !

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:31'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:31'!
FAILURE!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:41'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:42:41'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:42:41'!
FAILURE!
!MarsRoverHeadingWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 15:43:34' prior: 50627395!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	headingWindow := ''.
	
	marsRover addObserver: self
	! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:37'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:43:37'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:37'!
ERROR!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:43:43'!
updateWhenHeadingWest
	self shouldBeImplemented.! !
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:43:58' prior: 50629187!
updateWhenHeadingWest
	
	headingWindow := 'Apuntando al Oeste'! !

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:43:59'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:44:01'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:44:02'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:44:20'!
test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowTracer window .! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:44:21'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:21'!
ERROR!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:44:24'!
updateWhenHeadingSouth
	self shouldBeImplemented.! !
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:44:34' prior: 50629438!
updateWhenHeadingSouth
	
	headingWindow := 'Apuntando al Sur'! !

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:35'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:44:36'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:44:36'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:44:53'!
test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Este' equals: headingWindowTracer window .! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:44:56'!
test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowTracer window .! !

!methodRemoval: LogAndWindowTest #test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:56'!
test15HeadingWindowShowsHeadingSputhMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowTracer window .!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:44:57'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:44:57'!
ERROR!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:45:02'!
updateWhenHeadingEast
	self shouldBeImplemented.! !
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:45:11' prior: 50629726!
updateWhenHeadingEast
	
	headingWindow := 'Apuntando al Este'! !

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:12'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:45:14'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:45:14'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:45:27'!
test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Norte' equals: headingWindowTracer window .! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:28'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:29'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:45:29'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:29'!
ERROR!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:45:32'!
updateWhenHeadingNorth
	self shouldBeImplemented.! !
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:45:42' prior: 50629994!
updateWhenHeadingNorth
	
	headingWindow := 'Apuntando al Norte'! !

!testRun: #LogAndWindowTest #test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:43'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:45:44'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:45:44'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:48:14'!
test18HeadingWindowShowsHeadingMessageWithRotateRightCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Este' equals: headingWindowTracer window .! !

!testRun: #LogAndWindowTest #test18HeadingWindowShowsHeadingMessageWithRotateRightCommand stamp: 'FP 6/4/2023 15:48:15'!
PASSED!

!methodRemoval: LogAndWindowTest #test18HeadingWindowShowsHeadingMessageWithRotateRightCommand stamp: 'FP 6/4/2023 15:49:08'!
test18HeadingWindowShowsHeadingMessageWithRotateRightCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: 'Apuntando al Este' equals: headingWindowTracer window .!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:54:36'!
test18HeadingLogAddsHeadingsWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test13HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:54:36'!
test13HeadingLogAddsHeadingsWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:54:41'!
test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: headingWindowTracer window .! !

!methodRemoval: LogAndWindowTest #test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:54:41'!
test14HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: headingWindowTracer window .!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:54:45'!
test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowTracer window .! !

!methodRemoval: LogAndWindowTest #test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:54:45'!
test15HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowTracer window .!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:54:49'!
test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Este' equals: headingWindowTracer window .! !

!methodRemoval: LogAndWindowTest #test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:54:49'!
test16HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Este' equals: headingWindowTracer window .!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:55:24'!
test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Norte' equals: headingWindowTracer window .! !

!methodRemoval: LogAndWindowTest #test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:24'!
test17HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Norte' equals: headingWindowTracer window .!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:55:30'!
test17HeadingLogAddsHeadingsWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test18HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:55:30'!
test18HeadingLogAddsHeadingsWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.!
!MarsRover methodsFor: 'heading' stamp: 'FP 6/4/2023 15:55:40' prior: 50628783!
rotateRight
	
	head rotateRight.
	
! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:41'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:55:42'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 15:55:42'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:55:42'!
FAILURE!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 15:58:30'!
test17ObserversUpdateHeadingWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test17HeadingLogAddsHeadingsWithRotateRightCommand stamp: 'FP 6/4/2023 15:58:30'!
test17HeadingLogAddsHeadingsWithRotateRightCommand

	|marsRover headingLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'rrrr'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Sur'.
	expectedLog add: 'Apuntando al Oeste'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingLogTracer log.!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:00:03' prior: 50630479!
test17ObserversUpdateHeadingWithRotateRightCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'r'.

	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:00:06'!
FAILURE!

!testRun: #LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:00:06'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'FP 6/4/2023 16:00:22' prior: 50630351!
rotateRight
	
	head rotateRight.
	
	head updateObservers 
	
! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:00:24'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:00:24'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:01:17' prior: 50625156!
test02PositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionWindowTracer := MarsRoverPositionWindowTracer with: marsRover.
	
	initialWindow := positionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: positionWindowTracer window.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:01:19'!
PASSED!

----SNAPSHOT----(4 June 2023 16:01:23) CuisUniversity-5832.image priorSource: 9488132!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:10:14'!
test18PositionLogDoesNotChangeWithRotateRightCommand
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: 'r'.
	
	self assert: initialLog equals: positionLogTracer log.! !

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:10:15'!
ERROR!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:10:15'!
ERROR!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:10:23'!
updateWhenHeadingEast
	self shouldBeImplemented.! !
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:10:31' prior: 50630823!
updateWhenHeadingEast
! !

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:10:34'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:10:35'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:10:36'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:10:36'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:29' prior: 50630801!
test18PositionLogDoesNotChangeWithRotateRightCommand
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: 'rrrr'.
	
	self assert: initialLog equals: positionLogTracer log.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:11:33'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:11:33'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:11:33'!
ERROR!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:36'!
updateWhenHeadingSouth
	self shouldBeImplemented.! !
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:39' prior: 50631102!
updateWhenHeadingSouth
	! !

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:11:40'!
ERROR!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:44'!
updateWhenHeadingWest
	self shouldBeImplemented.! !
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:47' prior: 50631116!
updateWhenHeadingWest
	! !

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:11:48'!
ERROR!
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:51'!
updateWhenHeadingNorth
	self shouldBeImplemented.! !
!MarsRoverPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:11:53' prior: 50631130!
updateWhenHeadingNorth
	! !

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:11:54'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:12:45'!
test18PositionLogDoesNotChangeWithHeadingUpdate
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: 'rrrr'.
	
	self assert: initialLog equals: positionLogTracer log.! !

!methodRemoval: LogAndWindowTest #test18PositionLogDoesNotChangeWithRotateRightCommand stamp: 'FP 6/4/2023 16:12:45'!
test18PositionLogDoesNotChangeWithRotateRightCommand
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := MarsRoverPositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: 'rrrr'.
	
	self assert: initialLog equals: positionLogTracer log.!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:19'!
test19PositionWindowDoesNotChangeWithHeadingUpdate

	|marsRover initialWindow positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionWindowTracer := MarsRoverPositionWindowTracer with: marsRover.
	
	initialWindow := positionWindowTracer window.
	
	marsRover process: 'rrrr'.
	
	self assert: initialWindow equals: positionWindowTracer window.! !

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:13:20'!
ERROR!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:13:20'!
ERROR!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:23'!
updateWhenHeadingEast
	self shouldBeImplemented.! !
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:26' prior: 50631196!
updateWhenHeadingEast
	! !

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:13:28'!
ERROR!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:31'!
updateWhenHeadingSouth
	self shouldBeImplemented.! !
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:33' prior: 50631210!
updateWhenHeadingSouth
	! !

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:13:34'!
ERROR!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:37'!
updateWhenHeadingWest
	self shouldBeImplemented.! !
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:40' prior: 50631224!
updateWhenHeadingWest
	! !

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:13:41'!
ERROR!
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:45'!
updateWhenHeadingNorth
	self shouldBeImplemented.! !
!MarsRoverPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:13:47' prior: 50631238!
updateWhenHeadingNorth
	! !

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:13:48'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:14:21'!
test20HeadingLogDoesNotChangeWithPositionUpdate
	
	|marsRover initialLog headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
	
	initialLog := headingLogTracer log.
	
	marsRover process: 'f'.
	
	self assert: initialLog equals: headingLogTracer log.! !

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:14:33'!
ERROR!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:14:33'!
ERROR!
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:14:37'!
updatePosition: aPosition 
	self shouldBeImplemented.! !
!MarsRoverHeadingLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:14:40' prior: 50631273!
updatePosition: aPosition 
	! !

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:14:40'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:14:59'!
test21HeadingWindowDoesNotChangeWithPositionUpdate

	|marsRover initialWindow headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := MarsRoverHeadingWindowTracer with: marsRover.
	
	initialWindow := headingWindowTracer window.
	
	marsRover process: 'f'.
	
	self assert: initialWindow equals: headingWindowTracer window.! !

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:15:00'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:15:00'!
ERROR!
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:15:05'!
updatePosition: aPosition 
	self shouldBeImplemented.! !
!MarsRoverHeadingWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:15:07' prior: 50631310!
updatePosition: aPosition 
	! !

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:15:08'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:15:46'!
test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'r'.

	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingLogTracer log.! !

!methodRemoval: LogAndWindowTest #test17ObserversUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:15:46'!
test17ObserversUpdateHeadingWithRotateRightCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := MarsRoverHeadingLogTracer with: marsRover.
		
	marsRover process: 'r'.

	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingLogTracer log.!

----SNAPSHOT----(4 June 2023 16:16:26) CuisUniversity-5832.image priorSource: 9572716!

----SNAPSHOT----(4 June 2023 16:17:18) CuisUniversity-5832.image priorSource: 9590431!

Object subclass: #MarsRoverObserver
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:17:43'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:05'!
Object subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: 'headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:09'!
Object subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: 'headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:13'!
Object subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: 'positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:16'!
Object subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: 'positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: 'positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:24'!
MarsRoverObserver subclass: #MarsRoverPositionWindowTracer
	instanceVariableNames: 'positionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver  subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: 'headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:28'!
MarsRoverObserver subclass: #MarsRoverHeadingWindowTracer
	instanceVariableNames: 'headingWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver  subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:32'!
MarsRoverObserver subclass: #MarsRoverHeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver  subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:37'!
MarsRoverObserver subclass: #MarsRoverPositionLogTracer
	instanceVariableNames: 'positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #HeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:18:55'!
MarsRoverObserver subclass: #HeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #HeadingLogTracer stamp: 'FP 6/4/2023 16:19:02'!
MarsRoverObserver subclass: #HeadingLogTracer
	instanceVariableNames: 'headingLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:19:03'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:19:04'!
PASSED!

!classRenamed: #MarsRoverHeadingLogTracer as: #HeadingLogTracer stamp: 'FP 6/4/2023 16:19:10'!
Smalltalk renameClassNamed: #MarsRoverHeadingLogTracer as: #HeadingLogTracer!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50627114!
test07HeadingLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := HeadingLogTracer with: marsRover.
	
	initialLog := headingLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50628158!
test09HeadingLogAddsHeadingWestWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := HeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50631324!
test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := HeadingLogTracer with: marsRover.
		
	marsRover process: 'r'.

	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50628593!
test12HeadingLogAddsHeadingNorthWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	headingLogTracer := HeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Norte') equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50628434!
test11HeadingLogAddsHeadingEastWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth.
	headingLogTracer := HeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50628187!
test10HeadingLogAddsHeadingSouthWithRotateLeftCommand

	|marsRover headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingLogTracer := HeadingLogTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: (OrderedCollection with: 'Apuntando al Sur') equals: headingLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:10' prior: 50631252!
test20HeadingLogDoesNotChangeWithPositionUpdate
	
	|marsRover initialLog headingLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingLogTracer := HeadingLogTracer with: marsRover.
	
	initialLog := headingLogTracer log.
	
	marsRover process: 'f'.
	
	self assert: initialLog equals: headingLogTracer log.! !

!classRenamed: #MarsRoverHeadingWindowTracer as: #HeadingWindowTracer stamp: 'FP 6/4/2023 16:19:17'!
Smalltalk renameClassNamed: #MarsRoverHeadingWindowTracer as: #HeadingWindowTracer!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:18' prior: 50627324!
test08HeadingWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := HeadingWindowTracer with: marsRover.
	
	initialWindow := headingWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:18' prior: 50631287!
test21HeadingWindowDoesNotChangeWithPositionUpdate

	|marsRover initialWindow headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := HeadingWindowTracer with: marsRover.
	
	initialWindow := headingWindowTracer window.
	
	marsRover process: 'f'.
	
	self assert: initialWindow equals: headingWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:18' prior: 50630228!
test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingWindowTracer := HeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Sur' equals: headingWindowTracer window .! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:18' prior: 50630256!
test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth .
	headingWindowTracer := HeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Este' equals: headingWindowTracer window .! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:18' prior: 50630200!
test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingWindowTracer := HeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Oeste' equals: headingWindowTracer window .! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:18' prior: 50630284!
test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand

	|marsRover headingWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingWindowTracer := HeadingWindowTracer with: marsRover.
		
	marsRover process: 'l'.
	
	self assert: 'Apuntando al Norte' equals: headingWindowTracer window .! !

!classRenamed: #MarsRoverPositionLogTracer as: #PositionLogTracer stamp: 'FP 6/4/2023 16:19:23'!
Smalltalk renameClassNamed: #MarsRoverPositionLogTracer as: #PositionLogTracer!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:23' prior: 50624937!
test01PositionLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := PositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: positionLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:23' prior: 50626333!
test05PositionLogAddsNewPositionWithBackwardCommand 

	|marsRover positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := PositionLogTracer with: marsRover.
		
	marsRover process: 'b'.
	
	self assert: (OrderedCollection with: 1@0) equals: positionLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:23' prior: 50625303!
test03PositionLogAddsNewPositionWithForwardCommand 

	|marsRover positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := PositionLogTracer with: marsRover.
		
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: positionLogTracer log.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:23' prior: 50631144!
test18PositionLogDoesNotChangeWithHeadingUpdate
	
	|marsRover initialLog positionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionLogTracer := PositionLogTracer with: marsRover.
	
	initialLog := positionLogTracer log.
	
	marsRover process: 'rrrr'.
	
	self assert: initialLog equals: positionLogTracer log.! !

!classRenamed: #MarsRoverPositionWindowTracer as: #PositionWindowTracer stamp: 'FP 6/4/2023 16:19:29'!
Smalltalk renameClassNamed: #MarsRoverPositionWindowTracer as: #PositionWindowTracer!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:29' prior: 50631173!
test19PositionWindowDoesNotChangeWithHeadingUpdate

	|marsRover initialWindow positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionWindowTracer := PositionWindowTracer with: marsRover.
	
	initialWindow := positionWindowTracer window.
	
	marsRover process: 'rrrr'.
	
	self assert: initialWindow equals: positionWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:29' prior: 50626501!
test06PositionWindowShowsNewPositionWithBackwardCommand

	|marsRover positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.	
	positionWindowTracer := PositionWindowTracer with: marsRover.
		
	marsRover process: 'b'.
	
	self assert: (1@0) asString equals: positionWindowTracer window .! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:29' prior: 50630664!
test02PositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	positionWindowTracer := PositionWindowTracer with: marsRover.
	
	initialWindow := positionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: positionWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:19:29' prior: 50625808!
test04PositionWindowShowsNewPositionWithForwardCommand

	|marsRover positionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.	
	positionWindowTracer := PositionWindowTracer with: marsRover.
		
	marsRover process: 'f'.
	
	self assert: (1@2) asString equals: positionWindowTracer window .! !
!MarsRoverObserver methodsFor: 'nil' stamp: 'FP 6/4/2023 16:20:17'!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	marsRover addObserver: self
	! !
!HeadingLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:20:32' prior: 50627566 overrides: 50631959!
initializeWith: aMarsRover 

	super initializeWith: aMarsRover.
	headingLog := OrderedCollection new.
	

	! !
!HeadingWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:20:46' prior: 50629069 overrides: 50631959!
initializeWith: aMarsRover 

	super initializeWith: aMarsRover.
	headingWindow := ''.
	

	! !
!PositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:20:55' prior: 50626926 overrides: 50631959!
initializeWith: aMarsRover 

	super initializeWith: aMarsRover.
	positionLog := OrderedCollection new.
	
! !
!PositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:21:03' prior: 50626934 overrides: 50631959!
initializeWith: aMarsRover 

	super initializeWith: aMarsRover.
	positionWindow := ''.
	
! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:21:05'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:21:05'!
PASSED!
!MarsRoverObserver methodsFor: 'nil' stamp: 'FP 6/4/2023 16:21:24'!
updatePosition: aPosition 

	self subclassResponsibility ! !
!MarsRoverObserver methodsFor: 'nil' stamp: 'FP 6/4/2023 16:21:34'!
updateWhenHeadingEast

	self subclassResponsibility ! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:21:39'!
updateWhenHeadingSouth

	self subclassResponsibility ! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:21:41'!
updateWhenHeadingNorth

	self subclassResponsibility ! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:21:44'!
updateWhenHeadingWest

	self subclassResponsibility ! !
!MarsRoverObserver class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 16:22:54'!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!methodRemoval: PositionWindowTracer class #with: stamp: 'FP 6/4/2023 16:22:54'!
with: aMarsRover 

	^self new initializeWith: aMarsRover !

!methodRemoval: HeadingWindowTracer class #with: stamp: 'FP 6/4/2023 16:22:54'!
with: aMarsRover 

	^self new initializeWith: aMarsRover !

!methodRemoval: HeadingLogTracer class #with: stamp: 'FP 6/4/2023 16:22:54'!
with: aMarsRover 

	^self new initializeWith: aMarsRover !

!methodRemoval: PositionLogTracer class #with: stamp: 'FP 6/4/2023 16:22:54'!
with: aMarsRover 

	^self new initializeWith: aMarsRover !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:22:59'!
PASSED!

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:28:37'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:28:32'!
test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
	
	initialLog := headingAndPositionLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:28:40'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:28:40'!
ERROR!
!HeadingAndPositionLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 16:28:45'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!HeadingAndPositionLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 16:28:49' prior: 50632343!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:28:49'!
ERROR!

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:28:53'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:28:53'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:29:01' prior: 50632370!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:29:02'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:29:07'!
log
	self shouldBeImplemented.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:29:19' prior: 50632385!
log
	^OrderedCollection new! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:29:20'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:29:30'!
PASSED!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:33:07'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:33:03'!
test22HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
	
	initialWindow := headingAndPositionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingAndPositionWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:33:11'!
test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
	
	initialWindow := headingAndPositionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingAndPositionWindowTracer window.! !

!methodRemoval: LogAndWindowTest #test22HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:11'!
test22HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
	
	initialWindow := headingAndPositionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingAndPositionWindowTracer window.!

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:13'!
ERROR!

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:13'!
ERROR!
!HeadingAndPositionWindowTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 16:33:18'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!HeadingAndPositionWindowTracer class methodsFor: 'instance creation' stamp: 'FP 6/4/2023 16:33:22' prior: 50632470!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:23'!
ERROR!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:33:27'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:33:27'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:33:30' prior: 50632497!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:30'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:33:34'!
window
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:33:44' prior: 50632512!
window
	
	^''! !

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:45'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:33:47'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:33:47'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:41:05'!
test24HeadingAndPositionLogShowsNewPositions
	
	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'fb'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: (1@2) asString.
	expectedLog add: (1@1) asString.
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogShowsNewPositions stamp: 'FP 6/4/2023 16:41:07'!
FAILURE!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogShowsNewPositions stamp: 'FP 6/4/2023 16:41:07'!
FAILURE!

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:42:07'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover positionLogTracer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:42:04' prior: 50632376!
initializeWith: aMarsRover 

	marsRover := aMarsRover.^
	positionLogTracer := PositionLogTracer with: aMarsRover.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:42:17' prior: 50632390!
log
	
	positionLogTracer log! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:42:21' prior: 50632709!
log
	
	^positionLogTracer log! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogShowsNewPositions stamp: 'FP 6/4/2023 16:42:23'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:42:23'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogShowsNewPositions stamp: 'FP 6/4/2023 16:42:23'!
FAILURE!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:43:01' prior: 50632667!
test24HeadingAndPositionLogShowsNewPositions
	
	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'fb'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: (1@2).
	expectedLog add: (1@1).
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogShowsNewPositions stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:43:03'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:43:03'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:45:24'!
test25HeadingAndPositionLogShowsNewHeadings

	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'rl'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogShowsNewHeadings stamp: 'FP 6/4/2023 16:45:26'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogShowsNewHeadings stamp: 'FP 6/4/2023 16:45:26'!
FAILURE!

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/4/2023 16:46:12'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover positionLogTracer headingLogTracer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/4/2023 16:46:11' prior: 50632701!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	positionLogTracer := PositionLogTracer with: aMarsRover.
	headingLogTracer := HeadingLogTracer with: aMarsRover.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:47:58'!
test25HeadingAndPositionLogShowsChangesInPositionAndHeading

	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'rl'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.! !

!methodRemoval: LogAndWindowTest #test25HeadingAndPositionLogShowsNewHeadings stamp: 'FP 6/4/2023 16:47:58'!
test25HeadingAndPositionLogShowsNewHeadings

	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'rl'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/4/2023 16:48:12' prior: 50633075!
test25HeadingAndPositionLogShowsChangesInPositionAndHeading

	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'frl'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 1@2.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogShowsChangesInPositionAndHeading stamp: 'FP 6/4/2023 16:48:13'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogShowsChangesInPositionAndHeading stamp: 'FP 6/4/2023 16:48:13'!
FAILURE!

!methodRemoval: LogAndWindowTest #test25HeadingAndPositionLogShowsChangesInPositionAndHeading stamp: 'FP 6/4/2023 16:50:44'!
test25HeadingAndPositionLogShowsChangesInPositionAndHeading

	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'frl'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: 1@2.
	expectedLog add: 'Apuntando al Este'.
	expectedLog add: 'Apuntando al Norte'.
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.!

!methodRemoval: LogAndWindowTest #test24HeadingAndPositionLogShowsNewPositions stamp: 'FP 6/4/2023 16:51:00'!
test24HeadingAndPositionLogShowsNewPositions
	
	|marsRover headingAndPositionLogTracer expectedLog|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'fb'.
	
	expectedLog := OrderedCollection new.
	expectedLog add: (1@2).
	expectedLog add: (1@1).
	
	self assert: expectedLog equals: headingAndPositionLogTracer log.!

!methodRemoval: LogAndWindowTest #test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:51:01'!
test23HeadingAndPositionWindowDoesNotChangeAfterEmptyCommand 

	|marsRover initialWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
	
	initialWindow := headingAndPositionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingAndPositionWindowTracer window.!

!methodRemoval: LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:51:02'!
test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
	
	initialLog := headingAndPositionLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: headingAndPositionLogTracer log.!

!classRemoval: #HeadingAndPositionLogTracer stamp: 'FP 6/4/2023 16:51:07'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover positionLogTracer headingLogTracer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #HeadingAndPositionWindowTracer stamp: 'FP 6/4/2023 16:51:09'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/4/2023 16:51:49'!
PASSED!

----QUIT----(4 June 2023 16:51:59) CuisUniversity-5832.image priorSource: 9590519!

----STARTUP---- (5 June 2023 11:19:22) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:23:10'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:23:07'!
test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand
	
	|marsRover initialLog headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
	
	initialLog := headingAndPositionLogTracer log.
	
	marsRover process: ''.
	
	self assert: initialLog equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:23:12'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:23:12'!
ERROR!
!HeadingAndPositionLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/5/2023 11:23:26'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!HeadingAndPositionLogTracer class methodsFor: 'instance creation' stamp: 'FP 6/5/2023 11:23:30' prior: 50633398!
with: aMarsRover 

	^self new initializeWith: aMarsRover ! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:23:31'!
ERROR!

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:23:36'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:23:36'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:23:53' prior: 50633425!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:23:54'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:23:57'!
log
	self shouldBeImplemented.! !

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:24:11'!
Object subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover headingAndPositionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:24:10' prior: 50633440!
log
	
	^headingAndPositionLog! !

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:24:13'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:24:14'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:27:13'!
test23HeadingAndPositionLogAddsNewPosition

	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:27:15'!
FAILURE!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:27:15'!
FAILURE!
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:27:47' prior: 50633431!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	headingAndPositionLog := OrderedCollection new.
	
	aMarsRover addObserver: self.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:27:53'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:27:53'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:27:53'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:27:57'!
updatePosition: aPosition 
	self shouldBeImplemented.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:28:04' prior: 50633641!
updatePosition: aPosition 
	
	headingAndPositionLog add: aPosition ! !

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:28:05'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:28:06'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:28:06'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:32:01'!
test24HeadingAndPositionLogAddsHeadingWest
	
	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:32:03'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:32:03'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:32:06'!
updateWhenHeadingEast
	self shouldBeImplemented.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:32:15' prior: 50633820!
updateWhenHeadingEast
	
	headingAndPositionLog add: 'Apuntando al Este'! !

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:32:19'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:32:20'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:32:20'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:32:53'!
test24HeadingAndPositionLogAddsHeadingEast
	
	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingAndPositionLogTracer log.! !

!methodRemoval: LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:32:53'!
test24HeadingAndPositionLogAddsHeadingWest
	
	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingAndPositionLogTracer log.!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:33:39'!
test25HeadingAndPositionLogAddsHeadingSouth
	
	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Sur') equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:33:41'!
ERROR!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:33:41'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:33:45'!
updateWhenHeadingSouth
	self shouldBeImplemented.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:33:53' prior: 50634032!
updateWhenHeadingSouth
	
	headingAndPositionLog add: 'Apuntando al Sur'! !

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:33:54'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:33:55'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:33:55'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:34:09'!
test26HeadingAndPositionLogAddsHeadingWest
	
	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Oeste') equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:10'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:34:11'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:34:11'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:34:11'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:34:14'!
updateWhenHeadingWest
	self shouldBeImplemented.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:34:22' prior: 50634367!
updateWhenHeadingWest
	
	headingAndPositionLog add: 'Apuntando al Oeste'! !

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:34:23'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:34:25'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:34:25'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:34:57'!
test27HeadingAndPositionLogAddsHeadingNorth
	
	|marsRover headingAndPositionLogTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingAndPositionLogTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Norte') equals: headingAndPositionLogTracer log.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:34:58'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:34:58'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:34:58'!
ERROR!
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:35:02'!
updateWhenHeadingNorth
	self shouldBeImplemented.! !
!HeadingAndPositionLogTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:35:14' prior: 50634710!
updateWhenHeadingNorth
	
	headingAndPositionLog add: 'Apuntando al Norte'! !

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:35:14'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:35:16'!
PASSED!

MarsRoverObserver subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'marsRover headingAndPositionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'headingAndPositionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingAndPositionLogTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:36:18'!
MarsRoverObserver subclass: #HeadingAndPositionLogTracer
	instanceVariableNames: 'headingAndPositionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionLogTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:37:47' prior: 50633488 overrides: 50631959!
initializeWith: aMarsRover 

	super initializeWith: aMarsRover.
	headingAndPositionLog := OrderedCollection new.
	
	! !

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:39:07'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:39:04'!
test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand
	
	|marsRover initialWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
	
	initialWindow := headingAndPositionWindowTracer window.
	
	marsRover process: ''.
	
	self assert: initialWindow equals: headingAndPositionWindowTracer window.! !

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:39:08'!
ERROR!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:39:08'!
ERROR!
!HeadingAndPositionWindowTracer class methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:39:12'!
with: marsRover 
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer class methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:39:30' prior: 50634944!
with: aMarsRover 

	^self new initializeWith: aMarsRover! !

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:39:31'!
ERROR!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:39:35'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:39:35'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:39:38' prior: 50634968!
initializeWith: aMarsRover 

	marsRover := aMarsRover.! !

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:39:39'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:39:42'!
window
	self shouldBeImplemented.! !

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:39:50'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover headingAndPositionWindow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:39:49' prior: 50634983!
window
	
	^headingAndPositionWindow! !

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:39:52'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:39:53'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:45:27'!
test29HeadingAndPositionWindowShowsNewPosition

	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
	
	marsRover process: 'f'.
	
	expectedWindow := 'Posicion: ', (1@2) asString , ' - Heading: '.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.! !

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:45:28'!
FAILURE!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:45:28'!
FAILURE!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:45:35'!
FAILURE!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:45:35'!
FAILURE!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:46:37'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover headingAndPositionWindow position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:46:38'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover headingAndPositionWindow position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:46:36' prior: 50634974!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	position := ''.
	heading := ''.! !

Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:46:43'!
Object subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'marsRover position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:46:56' prior: 50635062!
initializeWith: aMarsRover 

	marsRover := aMarsRover.
	position := ''.
	heading := ''.
	
	aMarsRover addObserver: self.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:46:58'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:46:58'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:46:58'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:47:02'!
updatePosition: aPosition 
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:47:22' prior: 50635259!
updatePosition: aPosition 
	
	position := aPosition asString! !

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:47:23'!
FAILURE!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:48:11' prior: 50634998!
window
	
	^'Posicion: ', position , ' - Heading: ', heading ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:48:13'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:48:13'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:49:13'!
test30HeadingAndPositionWindowAddsHeadingEast
	
	|marsRover headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionLogTracer with: marsRover.
		
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 'Apuntando al Este') equals: headingAndPositionWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:50:01' prior: 50635444!
test30HeadingAndPositionWindowAddsHeadingEast
	
	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
		
	marsRover process: 'fr'.
	
	expectedWindow := 'Posicion: ', (1@2) asString , ' - Heading: Apuntando al Este'.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.! !

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:50:03'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:50:03'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:50:06'!
updateWhenHeadingEast
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:50:16' prior: 50635484!
updateWhenHeadingEast
	
	heading := 'Apuntando al Este'! !

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:50:17'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:50:19'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:51:00'!
test30HeadingAndPositionWindowAddsHeadingSouth
	
	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
		
	marsRover process: 'fr'.
	
	expectedWindow := 'Posicion: ', (2@1) asString , ' - Heading: Apuntando al Sur'.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.! !
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:51:03'!
test31HeadingAndPositionWindowAddsHeadingSouth
	
	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
		
	marsRover process: 'fr'.
	
	expectedWindow := 'Posicion: ', (2@1) asString , ' - Heading: Apuntando al Sur'.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.! !

!methodRemoval: LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:51:03'!
test30HeadingAndPositionWindowAddsHeadingSouth
	
	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingEast .
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
		
	marsRover process: 'fr'.
	
	expectedWindow := 'Posicion: ', (2@1) asString , ' - Heading: Apuntando al Sur'.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:51:04'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:51:04'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:51:08'!
updateWhenHeadingSouth
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:51:17' prior: 50635561!
updateWhenHeadingSouth
	
	heading := 'Apuntando al Sur'! !

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:51:18'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:51:20'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:52:18'!
test32HeadingAndPositionWindowAddsHeadingWest
	
	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingSouth.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
		
	marsRover process: 'fr'.
	
	expectedWindow := 'Posicion: ', (1@0) asString , ' - Heading: Apuntando al Oeste'.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.! !

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:52:19'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:52:19'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:52:23'!
updateWhenHeadingWest
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:52:34' prior: 50635604!
updateWhenHeadingWest
	
	heading := 'Apuntando al Oeste'! !

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:52:35'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:52:37'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:52:37'!
PASSED!
!LogAndWindowTest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:53:18'!
test33HeadingAndPositionWindowAddsHeadingNorth
	
	|marsRover expectedWindow headingAndPositionWindowTracer|
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingWest.
	headingAndPositionWindowTracer := HeadingAndPositionWindowTracer with: marsRover.
		
	marsRover process: 'fr'.
	
	expectedWindow := 'Posicion: ', (0@1) asString , ' - Heading: Apuntando al Norte'.
	
	self assert: expectedWindow equals: headingAndPositionWindowTracer window.! !

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:19'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:19'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:36'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:36'!
ERROR!
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:53:41'!
updateWhenHeadingNorth
	self shouldBeImplemented.! !
!HeadingAndPositionWindowTracer methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 11:53:52' prior: 50635775!
updateWhenHeadingNorth
	
	heading := 'Apuntando al Norte'! !

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:53'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:53:55'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:54:21'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:54:22'!
PASSED!

MarsRoverObserver subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingAndPositionWindowTracer category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 11:54:34'!
MarsRoverObserver subclass: #HeadingAndPositionWindowTracer
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:54:35'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:54:35'!
PASSED!
!HeadingAndPositionWindowTracer methodsFor: 'initialization' stamp: 'FP 6/5/2023 11:54:55' prior: 50635084 overrides: 50631959!
initializeWith: aMarsRover 

	super initializeWith: aMarsRover.
	position := ''.
	heading := ''.
	
! !

!methodRemoval: HeadingAndPositionWindowTracer class #with: stamp: 'FP 6/5/2023 11:55:08'!
with: aMarsRover 

	^self new initializeWith: aMarsRover!

!methodRemoval: HeadingAndPositionLogTracer class #with: stamp: 'FP 6/5/2023 11:55:12'!
with: aMarsRover 

	^self new initializeWith: aMarsRover !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 11:55:14'!
PASSED!

----SNAPSHOT----(5 June 2023 12:04:12) CuisUniversity-5832.image priorSource: 9654662!
!MarsRoverHeading methodsFor: 'nil' stamp: 'FP 6/5/2023 12:04:56'!
updateObservers 

	self subclassResponsibility ! !

----SNAPSHOT----(5 June 2023 12:07:34) CuisUniversity-5832.image priorSource: 9756283!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 12:07:37'!
PASSED!

----STARTUP---- (5 June 2023 23:00:37) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


Object subclass: #PositionProxy
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:02:14'!
Object subclass: #PositionProxy
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:04:07'!
assign: aNewPosition

	position := aNewPosition ! !
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:04:24' overrides: 16902254!
value

	^position ! !
!PositionProxy class methodsFor: 'nil' stamp: 'FP 6/5/2023 23:05:17'!
with: aPosition

	^self new initializeWith: aPosition ! !
!PositionProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:05:33'!
initializeWith: aPosition

	position := aPosition ! !
!MarsRover methodsFor: 'initialization' stamp: 'FP 6/5/2023 23:05:55' prior: 50626623!
initializeAt: aPosition heading: aHeadingType

	position := PositionProxy with: aPosition.
	head := aHeadingType for: self.
	
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:06:36' prior: 50624629!
moveWest
	
	position assign:  position + (-1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:06:48' prior: 50624625!
moveSouth
	
	position assign: position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:06:56' prior: 50624621!
moveNorth
	
	position assign: position + (0@1)! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:07:01' prior: 50624613!
moveEast
	
	position assign: position + (1@0)! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:07:08' prior: 50626659!
moveForward
	
	head moveForward.
	
	observers do: [:anObserver | anObserver updatePosition: position value]! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:07:12' prior: 50626745!
moveBackward
	
	head moveBackward.
	
	observers do: [:anObserver | anObserver updatePosition: position value]! !
!MarsRover methodsFor: 'testing' stamp: 'FP 6/5/2023 23:07:16' prior: 50624587!
isAt: aPosition heading: aHeadingType

	^position value = aPosition and: [ head isHeading: aHeadingType ]! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:07:18'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:07:18'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:07:20'!
ERROR!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:07:58'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:07:58'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:00'!
ERROR!
!PositionProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:08:28' overrides: 50337880!
doesNotUnderstand: aMessage 

	aMessage sendTo: position ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:29'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:29'!
FAILURE!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:08:29'!
FAILURE!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:08:29'!
FAILURE!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:08:29'!
FAILURE!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:29'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:08:30'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:08:30'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:08:30'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:30'!
FAILURE!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:30'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:08:30'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:08:30'!
PASSED!
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:08:35' prior: 50636986 overrides: 50337880!
doesNotUnderstand: aMessage 

	^aMessage sendTo: position ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:08:36'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:08:54'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:09:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionProxy head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636600!
moveEast
	
	positionProxy assign: positionProxy + (1@0)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636585!
moveWest
	
	positionProxy assign:  positionProxy + (-1@0)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636610!
moveBackward
	
	head moveBackward.
	
	observers do: [:anObserver | anObserver updatePosition: positionProxy value]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636617!
isAt: aPosition heading: aHeadingType

	^positionProxy value = aPosition and: [ head isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636595!
moveNorth
	
	positionProxy assign: positionProxy + (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636590!
moveSouth
	
	positionProxy assign: positionProxy + (0@-1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636604!
moveForward
	
	head moveForward.
	
	observers do: [:anObserver | anObserver updatePosition: positionProxy value]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:09:04' prior: 50636577!
initializeAt: aPosition heading: aHeadingType

	positionProxy := PositionProxy with: aPosition.
	head := aHeadingType for: self.
	
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'observers' stamp: 'FP 6/5/2023 23:09:54' prior: 50626920!
addObserver: anObserver 

	observers add: anObserver.
	
	positionProxy addObserver: anObserver ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:09:58'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:09:58'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:00'!
ERROR!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:10:06'!
ERROR!

!classDefinition: #PositionProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:10:25'!
Object subclass: #PositionProxy
	instanceVariableNames: 'position observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:10:25'!
addObserver: anObserver 

	observers add: anObserver ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:10:28'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:10:28'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:30'!
ERROR!
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:10:43' prior: 50636572!
initializeWith: aPosition

	position := aPosition.
	observers := OrderedCollection new.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:10:44'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:10:44'!
PASSED!
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:11:13' prior: 50636560!
assign: aNewPosition

	position := aNewPosition.
	self updateObservers! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:15'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:11:15'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:11:15'!
ERROR!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:11:15'!
ERROR!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:11:15'!
ERROR!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:11:15'!
ERROR!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:11:16'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:11:16'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:11:17'!
ERROR!
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:11:53'!
updateObservers

	observers do: [:anObserver | anObserver updatePosition: position ].! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:11:54'!
FAILURE!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:11:54'!
FAILURE!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:11:54'!
FAILURE!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:11:54'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:11:56'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:12:09' prior: 50637524!
moveBackward
	
	head moveBackward.
	
! !
!MarsRover methodsFor: 'moving' stamp: 'FP 6/5/2023 23:12:15' prior: 50637548!
moveForward
	
	head moveForward.
	
! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:12:18'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:12:19'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:12:19'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:12:19'!
PASSED!

Object subclass: #HeadingProxy
	instanceVariableNames: 'heading observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:12:39'!
Object subclass: #HeadingProxy
	instanceVariableNames: 'heading observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!HeadingProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:12:53'!
addObserver: anObserver

	observers add: anObserver ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:13:03' overrides: 16902254!
value 

	^heading! !
!HeadingProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:13:49' overrides: 50337880!
doesNotUnderstand: aMessage 

	^aMessage sendTo: heading ! !
!HeadingProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:14:22'!
initializeWith: aHeading

	heading := aHeading .
	observers := OrderedCollection new.! !
!HeadingProxy class methodsFor: 'nil' stamp: 'FP 6/5/2023 23:16:41'!
for: aMarsRover 
	
	^self new initializeFor: aMarsRover ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:17:14'!
initializeFor: aMarsRover

	heading := MarsRoverHeadingNorth for: aMarsRover .
	observers := OrderedCollection new.! !

!methodRemoval: HeadingProxy #initializeWith: stamp: 'FP 6/5/2023 23:17:16'!
initializeWith: aHeading

	heading := aHeading .
	observers := OrderedCollection new.!
!HeadingProxy class methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:18:04'!
heading: aHeadingType for: aMarsRover 
	
	^self new initializeHeading: aHeadingType for: aMarsRover ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:18:21'!
initializeHeading: aHeadingType for: aMarsRover

	heading := aHeadingType for: aMarsRover .
	observers := OrderedCollection new.! !

!methodRemoval: HeadingProxy #initializeFor: stamp: 'FP 6/5/2023 23:18:26'!
initializeFor: aMarsRover

	heading := MarsRoverHeadingNorth for: aMarsRover .
	observers := OrderedCollection new.!
!MarsRover methodsFor: 'initialization' stamp: 'FP 6/5/2023 23:19:08' prior: 50637555!
initializeAt: aPosition heading: aHeadingType

	positionProxy := PositionProxy with: aPosition.
	head := HeadingProxy heading: aHeadingType for: self. 
	
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:20:49' prior: 50624563!
headEast
	
	head assign: (MarsRoverHeadingEast for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:21:01' prior: 50624567!
headNorth
	
	head assing:  (MarsRoverHeadingNorth for: self) ! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:21:06' prior: 50638774!
headNorth
	
	head assign:  (MarsRoverHeadingNorth for: self) ! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:21:14' prior: 50624571!
headSouth
	
	head assign: (MarsRoverHeadingSouth for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:21:23' prior: 50624575!
headWest
	
	head assign: (MarsRoverHeadingWest for: self)! !
!HeadingProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:21:56'!
assign: aHeading

	heading := aHeading ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:21:57'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:21:57'!
PASSED!
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:22:16' prior: 50638793!
assign: aHeading

	heading := aHeading.
	
	self updateObservers 
	! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:25:36' prior: 50638976!
assign: aHeading

	heading := aHeading.
	
	heading updateObservers ! !
!HeadingProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:25:52'!
updateObserversWhenHeadingEast
	
	observers do: [:anObserver | anObserver updateWhenHeadingEast]! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:01'!
updateObserversWhenHeadingSouth
	
	observers do: [:anObserver | anObserver updateWhenHeadingSouth]! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:07'!
updateObserversWhenHeadingWest
	
	observers do: [:anObserver | anObserver updateWhenHeadingWest]! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:13'!
updateObserversWhenHeadingNorth
	
	observers do: [:anObserver | anObserver updateWhenHeadingNorth]! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:26:33' prior: 50627573!
rotateLeft
	
	head rotateLeft.
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'FP 6/5/2023 23:26:36' prior: 50630539!
rotateRight
	
	head rotateRight.
	
	! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:26:40'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:26:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'positionProxy headingProxy observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50639011!
rotateLeft
	
	headingProxy rotateLeft.
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638789!
headWest
	
	headingProxy assign: (MarsRoverHeadingWest for: self)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50639015!
rotateRight
	
	headingProxy rotateRight.
	
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638784!
headSouth
	
	headingProxy assign: (MarsRoverHeadingSouth for: self)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638779!
headNorth
	
	headingProxy assign:  (MarsRoverHeadingNorth for: self) ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638760!
initializeAt: aPosition heading: aHeadingType

	positionProxy := PositionProxy with: aPosition.
	headingProxy := HeadingProxy heading: aHeadingType for: self. 
	
	observers := OrderedCollection new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638507!
moveBackward
	
	headingProxy moveBackward.
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50637531!
isAt: aPosition heading: aHeadingType

	^positionProxy value = aPosition and: [ headingProxy isHeading: aHeadingType ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638511!
moveForward
	
	headingProxy moveForward.
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:26:45' prior: 50638769!
headEast
	
	headingProxy assign: (MarsRoverHeadingEast for: self)! !
!MarsRoverHeadingEast methodsFor: 'nil' stamp: 'FP 6/5/2023 23:29:42'!
logMessage

	'Apuntando al Este'
	! !
!MarsRoverHeadingNorth methodsFor: 'nil' stamp: 'FP 6/5/2023 23:29:51'!
logMessage

	'Apuntando al Norte'
	! !
!MarsRoverHeadingSouth methodsFor: 'nil' stamp: 'FP 6/5/2023 23:29:57'!
logMessage

	'Apuntando al Sur'
	! !
!MarsRoverHeadingWest methodsFor: 'nil' stamp: 'FP 6/5/2023 23:30:04'!
logMessage

	'Apuntando al Oeste'
	! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:30:20' prior: 50638982!
assign: aHeading

	heading := aHeading.
	
	self updateObservers ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:30:46'!
updateObservers
	
	observers do: [:anObserver | anObserver updateHeading: heading logMessage ]! !
!HeadingAndPositionLogTracer methodsFor: 'heading updates' stamp: 'FP 6/5/2023 23:31:10'!
updateHeading: headingText

	headingAndPositionLog add: headingText ! !
!HeadingAndPositionWindowTracer methodsFor: 'heading updates' stamp: 'FP 6/5/2023 23:31:40'!
updateHeading: headingText
	
	heading := headingText ! !
!HeadingLogTracer methodsFor: 'heading updates' stamp: 'FP 6/5/2023 23:31:53'!
updateHeading: headingText

	headingLog add: headingText ! !
!HeadingWindowTracer methodsFor: 'heading updates' stamp: 'FP 6/5/2023 23:32:10'!
updateHeading: headingText

	headingWindow := headingText ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:32:46'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:32:46'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:32:47'!
FAILURE!
!MarsRoverHeadingEast methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:33:05' prior: 50639266!
logMessage

	^'Apuntando al Este'
	! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:33:15' prior: 50639270!
logMessage

	^'Apuntando al Norte'
	! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:33:18' prior: 50639274!
logMessage

	^'Apuntando al Sur'
	! !
!MarsRoverHeadingWest methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:33:21' prior: 50639278!
logMessage

	^'Apuntando al Oeste'
	! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:33:23'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:33:23'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:33:24'!
FAILURE!

!methodRemoval: HeadingProxy #updateObserversWhenHeadingEast stamp: 'FP 6/5/2023 23:35:16'!
updateObserversWhenHeadingEast
	
	observers do: [:anObserver | anObserver updateWhenHeadingEast]!

!methodRemoval: HeadingProxy #updateObserversWhenHeadingNorth stamp: 'FP 6/5/2023 23:35:17'!
updateObserversWhenHeadingNorth
	
	observers do: [:anObserver | anObserver updateWhenHeadingNorth]!

!methodRemoval: HeadingProxy #updateObserversWhenHeadingSouth stamp: 'FP 6/5/2023 23:35:19'!
updateObserversWhenHeadingSouth
	
	observers do: [:anObserver | anObserver updateWhenHeadingSouth]!

!methodRemoval: HeadingProxy #updateObserversWhenHeadingWest stamp: 'FP 6/5/2023 23:35:20'!
updateObserversWhenHeadingWest
	
	observers do: [:anObserver | anObserver updateWhenHeadingWest]!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:35:22'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:35:22'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:35:23'!
FAILURE!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:36:22'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:36:22'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:36:29'!
FAILURE!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:36:40'!
PASSED!

!methodRemoval: MarsRover #updateObserversWhenHeadingWest stamp: 'FP 6/5/2023 23:37:12'!
updateObserversWhenHeadingWest
	
	observers do: [:anObserver | anObserver updateWhenHeadingWest]!

!methodRemoval: MarsRover #updateObserversWhenHeadingSouth stamp: 'FP 6/5/2023 23:37:14'!
updateObserversWhenHeadingSouth
	
	observers do: [:anObserver | anObserver updateWhenHeadingSouth ]!

!methodRemoval: MarsRover #updateObserversWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:24'!
updateObserversWhenHeadingNorth
	
	observers do: [:anObserver | anObserver updateWhenHeadingNorth]!

!methodRemoval: MarsRover #updateObserversWhenHeadingEast stamp: 'FP 6/5/2023 23:37:25'!
updateObserversWhenHeadingEast
	
	observers do: [:anObserver | anObserver updateWhenHeadingEast]!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:37:28'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:37:28'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:37:30'!
FAILURE!

!methodRemoval: PositionWindowTracer #updateWhenHeadingEast stamp: 'FP 6/5/2023 23:37:40'!
updateWhenHeadingEast
	!

!methodRemoval: PositionWindowTracer #updateWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:41'!
updateWhenHeadingNorth
	!

!methodRemoval: PositionWindowTracer #updateWhenHeadingSouth stamp: 'FP 6/5/2023 23:37:42'!
updateWhenHeadingSouth
	!

!methodRemoval: PositionWindowTracer #updateWhenHeadingWest stamp: 'FP 6/5/2023 23:37:42'!
updateWhenHeadingWest
	!

!methodRemoval: PositionLogTracer #updateWhenHeadingEast stamp: 'FP 6/5/2023 23:37:48'!
updateWhenHeadingEast
!

!methodRemoval: PositionLogTracer #updateWhenHeadingSouth stamp: 'FP 6/5/2023 23:37:49'!
updateWhenHeadingSouth
	!

!methodRemoval: PositionLogTracer #updateWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:50'!
updateWhenHeadingNorth
	!

!methodRemoval: PositionLogTracer #updateWhenHeadingWest stamp: 'FP 6/5/2023 23:37:51'!
updateWhenHeadingWest
	!

!methodRemoval: HeadingWindowTracer #updateWhenHeadingEast stamp: 'FP 6/5/2023 23:37:54'!
updateWhenHeadingEast
	
	headingWindow := 'Apuntando al Este'!

!methodRemoval: HeadingWindowTracer #updateWhenHeadingNorth stamp: 'FP 6/5/2023 23:37:55'!
updateWhenHeadingNorth
	
	headingWindow := 'Apuntando al Norte'!

!methodRemoval: HeadingWindowTracer #updateWhenHeadingSouth stamp: 'FP 6/5/2023 23:37:56'!
updateWhenHeadingSouth
	
	headingWindow := 'Apuntando al Sur'!

!methodRemoval: HeadingWindowTracer #updateWhenHeadingWest stamp: 'FP 6/5/2023 23:37:57'!
updateWhenHeadingWest
	
	headingWindow := 'Apuntando al Oeste'!

!methodRemoval: HeadingLogTracer #updateWhenHeadingEast stamp: 'FP 6/5/2023 23:37:59'!
updateWhenHeadingEast
	
	headingLog add: 'Apuntando al Este'!

!methodRemoval: HeadingLogTracer #updateWhenHeadingNorth stamp: 'FP 6/5/2023 23:38:00'!
updateWhenHeadingNorth
	
	headingLog add: 'Apuntando al Norte'!

!methodRemoval: HeadingLogTracer #updateWhenHeadingSouth stamp: 'FP 6/5/2023 23:38:01'!
updateWhenHeadingSouth
	
	headingLog add: 'Apuntando al Sur'!

!methodRemoval: HeadingLogTracer #updateWhenHeadingWest stamp: 'FP 6/5/2023 23:38:01'!
updateWhenHeadingWest
	
	headingLog add: 'Apuntando al Oeste'!

!methodRemoval: HeadingAndPositionWindowTracer #updateWhenHeadingEast stamp: 'FP 6/5/2023 23:38:04'!
updateWhenHeadingEast
	
	heading := 'Apuntando al Este'!

!methodRemoval: HeadingAndPositionWindowTracer #updateWhenHeadingNorth stamp: 'FP 6/5/2023 23:38:04'!
updateWhenHeadingNorth
	
	heading := 'Apuntando al Norte'!

!methodRemoval: HeadingAndPositionWindowTracer #updateWhenHeadingWest stamp: 'FP 6/5/2023 23:38:05'!
updateWhenHeadingWest
	
	heading := 'Apuntando al Oeste'!

!methodRemoval: HeadingAndPositionWindowTracer #updateWhenHeadingSouth stamp: 'FP 6/5/2023 23:38:06'!
updateWhenHeadingSouth
	
	heading := 'Apuntando al Sur'!

!methodRemoval: HeadingAndPositionLogTracer #updateWhenHeadingEast stamp: 'FP 6/5/2023 23:38:08'!
updateWhenHeadingEast
	
	headingAndPositionLog add: 'Apuntando al Este'!

!methodRemoval: HeadingAndPositionLogTracer #updateWhenHeadingNorth stamp: 'FP 6/5/2023 23:38:09'!
updateWhenHeadingNorth
	
	headingAndPositionLog add: 'Apuntando al Norte'!

!methodRemoval: HeadingAndPositionLogTracer #updateWhenHeadingSouth stamp: 'FP 6/5/2023 23:38:09'!
updateWhenHeadingSouth
	
	headingAndPositionLog add: 'Apuntando al Sur'!

!methodRemoval: HeadingAndPositionLogTracer #updateWhenHeadingWest stamp: 'FP 6/5/2023 23:38:10'!
updateWhenHeadingWest
	
	headingAndPositionLog add: 'Apuntando al Oeste'!
!PositionWindowTracer methodsFor: 'position updates' stamp: 'FP 6/5/2023 23:38:29'!
updateHeading: headingText

	positionWindow := headingText ! !
!PositionLogTracer methodsFor: 'position updates' stamp: 'FP 6/5/2023 23:38:46'!
updateHeading: headingText

! !
!PositionWindowTracer methodsFor: 'position updates' stamp: 'FP 6/5/2023 23:38:52' prior: 50640409!
updateHeading: headingText

	! !
!HeadingWindowTracer methodsFor: 'position updates' stamp: 'FP 6/5/2023 23:39:08' prior: 50639310!
updateHeading: headingText

	headingWindow := headingText ! !
!HeadingLogTracer methodsFor: 'position updates' stamp: 'FP 6/5/2023 23:39:19' prior: 50639305!
updateHeading: headingText

	headingLog add: headingText ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:39:47'!
FAILURE!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:39:47'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:39:48'!
FAILURE!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:40:10'!
FAILURE!
!MarsRover methodsFor: 'observers' stamp: 'FP 6/5/2023 23:42:21' prior: 50637563!
addObserver: anObserver 

	observers add: anObserver.
	
	positionProxy addObserver: anObserver.
	headingProxy addObserver: anObserver ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:42:22'!
PASSED!

Object subclass: #ActiveVariable
	instanceVariableNames: 'value observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ActiveVariable category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:43:13'!
Object subclass: #ActiveVariable
	instanceVariableNames: 'value observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #HeadingProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:43:21'!
Object subclass: #HeadingProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

ActiveVariable subclass: #HeadingProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #HeadingProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:43:28'!
ActiveVariable subclass: #HeadingProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #PositionProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:43:35'!
Object subclass: #PositionProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

ActiveVariable subclass: #PositionProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #PositionProxy category: 'MarsRover-WithHeading' stamp: 'FP 6/5/2023 23:43:44'!
ActiveVariable subclass: #PositionProxy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:43:53' prior: 50638132!
assign: aNewPosition

	value := aNewPosition.
	self updateObservers! !
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:43:57' prior: 50637144 overrides: 50337880!
doesNotUnderstand: aMessage 

	^aMessage sendTo: value ! !
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:01' prior: 50637947!
initializeWith: aPosition

	value := aPosition.
	observers := OrderedCollection new.! !
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:04' prior: 50638319!
updateObservers

	observers do: [:anObserver | anObserver updatePosition: value ].! !
!PositionProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:12' prior: 50636565 overrides: 16902254!
value

	^value ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:47' prior: 50639283!
assign: aHeading

	value := aHeading.
	
	self updateObservers ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:50' prior: 50638715 overrides: 50337880!
doesNotUnderstand: aMessage 

	^aMessage sendTo: value ! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:52' prior: 50638747!
initializeHeading: aHeadingType for: aMarsRover

	value := aHeadingType for: aMarsRover .
	observers := OrderedCollection new.! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:56' prior: 50639288!
updateObservers
	
	observers do: [:anObserver | anObserver updateHeading: value logMessage ]! !
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:44:59' prior: 50638711 overrides: 16902254!
value 

	^value! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:45:00'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:45:00'!
PASSED!
!ActiveVariable methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:45:10' overrides: 50337880!
doesNotUnderstand: aMessage 

	^aMessage sendTo: value ! !

!methodRemoval: HeadingProxy #doesNotUnderstand: stamp: 'FP 6/5/2023 23:45:10'!
doesNotUnderstand: aMessage 

	^aMessage sendTo: value !

!methodRemoval: PositionProxy #doesNotUnderstand: stamp: 'FP 6/5/2023 23:45:10'!
doesNotUnderstand: aMessage 

	^aMessage sendTo: value !
!ActiveVariable methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:45:23'!
assign: aNewPosition

	value := aNewPosition.
	self updateObservers! !

!methodRemoval: PositionProxy #assign: stamp: 'FP 6/5/2023 23:45:23'!
assign: aNewPosition

	value := aNewPosition.
	self updateObservers!

!methodRemoval: HeadingProxy #assign: stamp: 'FP 6/5/2023 23:45:23'!
assign: aHeading

	value := aHeading.
	
	self updateObservers !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:45:24'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:45:24'!
PASSED!
!ActiveVariable methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:45:29'!
addObserver: anObserver 

	observers add: anObserver ! !

!methodRemoval: PositionProxy #addObserver: stamp: 'FP 6/5/2023 23:45:29'!
addObserver: anObserver 

	observers add: anObserver !

!methodRemoval: HeadingProxy #addObserver: stamp: 'FP 6/5/2023 23:45:29'!
addObserver: anObserver

	observers add: anObserver !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:45:31'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:45:31'!
PASSED!
!ActiveVariable methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:45:38' overrides: 16902254!
value

	^value ! !

!methodRemoval: PositionProxy #value stamp: 'FP 6/5/2023 23:45:38'!
value

	^value !

!methodRemoval: HeadingProxy #value stamp: 'FP 6/5/2023 23:45:38'!
value 

	^value!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:45:40'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:45:40'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'FP 6/5/2023 23:47:21' prior: 50639234!
initializeAt: aPosition heading: aHeadingType

	positionProxy := PositionProxy with: aPosition.
	headingProxy := HeadingProxy with: (aHeadingType for: self).
	
	observers := OrderedCollection new.! !

!methodRemoval: HeadingProxy class #heading:for: stamp: 'FP 6/5/2023 23:47:32'!
heading: aHeadingType for: aMarsRover 
	
	^self new initializeHeading: aHeadingType for: aMarsRover !
!HeadingProxy class methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:47:50'!
with: aHeadingType

	^self new initializeWith: aHeadingType ! !
!HeadingProxy methodsFor: 'nil' stamp: 'FP 6/5/2023 23:48:04'!
initializeWith: aHeadingType 

	value := aHeadingType ! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:48:11'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:48:11'!
ERROR!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:12'!
ERROR!
!HeadingProxy methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:48:27' prior: 50641710!
initializeWith: aHeadingType 

	value := aHeadingType.
	observers := OrderedCollection new.! !

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:48:28'!
PASSED!

!methodRemoval: HeadingProxy #initializeHeading:for: stamp: 'FP 6/5/2023 23:48:30'!
initializeHeading: aHeadingType for: aMarsRover

	value := aHeadingType for: aMarsRover .
	observers := OrderedCollection new.!
!ActiveVariable methodsFor: 'as yet unclassified' stamp: 'FP 6/5/2023 23:48:35'!
initializeWith: aHeadingType 

	value := aHeadingType.
	observers := OrderedCollection new.! !

!methodRemoval: HeadingProxy #initializeWith: stamp: 'FP 6/5/2023 23:48:35'!
initializeWith: aHeadingType 

	value := aHeadingType.
	observers := OrderedCollection new.!

!methodRemoval: PositionProxy #initializeWith: stamp: 'FP 6/5/2023 23:48:35'!
initializeWith: aPosition

	value := aPosition.
	observers := OrderedCollection new.!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:48:36'!
PASSED!

!testRun: #LogAndWindowTest #test01PositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:49:41'!
PASSED!

!testRun: #LogAndWindowTest #test02PositionWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test03PositionLogAddsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test04PositionWindowShowsNewPositionWithForwardCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test05PositionLogAddsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test06PositionWindowShowsNewPositionWithBackwardCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test07HeadingLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test08HeadingWindowDoesNotChangeAfterEmptyCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test09HeadingLogAddsHeadingWestWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test10HeadingLogAddsHeadingSouthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test11HeadingLogAddsHeadingEastWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test12HeadingLogAddsHeadingNorthWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test13HeadingWindowShowsHeadingWestMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test14HeadingWindowShowsHeadingSouthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test15HeadingWindowShowsHeadingEastMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test16HeadingWindowShowsHeadingNorthMessageWithRotateLeftCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test17HeadingLogAndHeadingWindowUpdateHeadingWithRotateRightCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test18PositionLogDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test19PositionWindowDoesNotChangeWithHeadingUpdate stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test20HeadingLogDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test21HeadingWindowDoesNotChangeWithPositionUpdate stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test22HeadingAndPositionLogDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test23HeadingAndPositionLogAddsNewPosition stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test24HeadingAndPositionLogAddsHeadingEast stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test25HeadingAndPositionLogAddsHeadingSouth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test26HeadingAndPositionLogAddsHeadingWest stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test27HeadingAndPositionLogAddsHeadingNorth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test28HeadingAndPositionWindowDoesNotChangeWithEmptyCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test29HeadingAndPositionWindowShowsNewPosition stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test30HeadingAndPositionWindowAddsHeadingEast stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test31HeadingAndPositionWindowAddsHeadingSouth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test32HeadingAndPositionWindowAddsHeadingWest stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #LogAndWindowTest #test33HeadingAndPositionWindowAddsHeadingNorth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'FP 6/5/2023 23:49:42'!
PASSED!

----QUIT----(5 June 2023 23:49:45) CuisUniversity-5832.image priorSource: 9756498!

----STARTUP---- (6 June 2023 23:37:03) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'FP 6/6/2023 23:59:54'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FP 6/7/2023 00:08:12'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTest methodsFor: 'nil' stamp: 'FP 6/7/2023 00:08:06'!
test01NewCartStartsEmpty

	self assert: Cart new content isEmpty! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:08:28'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:08:28'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:08:33'!
content
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:09:07' prior: 50642493!
content
	
	^Bag new! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:09:07'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:09:09'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:20:56'!
test02BooksCanBeAddedToCart

	|cart|
	
	cart := Cart new.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart content! !

!testRun: #TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:21:22'!
ERROR!

!testRun: #TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:21:22'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:21:25'!
add: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FP 6/7/2023 00:22:05'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:22:04' prior: 50642519!
add: aBookISBN 
	
	books add: aBookISBN ! !

!testRun: #TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:22:08'!
ERROR!
!Cart methodsFor: 'nil' stamp: 'FP 6/7/2023 00:22:46' overrides: 16920235!
initialize

	books := Bag new! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:22:47'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:22:47'!
FAILURE!

!testRun: #TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:22:47'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:22:58' prior: 50642497!
content
	
	^books ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:23:07'!
books
	
	^books ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:23:07' prior: 50642506!
test02BooksCanBeAddedToCart

	|cart|
	
	cart := Cart new.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart books! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:23:07' prior: 50642483!
test01NewCartStartsEmpty

	self assert: Cart new books isEmpty! !

!methodRemoval: Cart #content stamp: 'FP 6/7/2023 00:23:07'!
content
	
	^books !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:23:09'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:23:09'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:23:56'!
test02BooksCanBeAddedOneAtATimeToCart

	|cart|
	
	cart := Cart new.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart books! !

!methodRemoval: TusLibrosTest #test02BooksCanBeAddedToCart stamp: 'FP 6/7/2023 00:23:56'!
test02BooksCanBeAddedToCart

	|cart|
	
	cart := Cart new.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart books!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:26:14'!
test03BooksCanBeAddedOneAtATimeToCart

	|cart|
	
	cart := Cart new.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag add: '1' withOccurrences: 3) equals: cart books! !

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:26:15'!
ERROR!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:26:15'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:26:20'!
add: aRenameMe1 withAmount: aRenameMe2 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:26:55' prior: 50642605!
add: aBookISBN withAmount: anAmount
	
	books add: aBookISBN withOccurrences: anAmount ! !

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:26:56'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:27:10'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:10'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:10'!
ERROR!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:10'!
ERROR!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:27:20' prior: 50642591!
test03BooksCanBeAddedOneAtATimeToCart

	|cart|
	
	cart := Cart new.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3) equals: cart books! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:27:22'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:22'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:22'!
FAILURE!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:22'!
FAILURE!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:30'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:32'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:33'!
FAILURE!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:27:33'!
FAILURE!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:28:27' prior: 50642632!
test03BooksCanBeAddedOneAtATimeToCart

	|cart|
	
	cart := Cart new.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3; yourself ) equals: cart books! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:28:28'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:28:29'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:28:29'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:28:32' prior: 50642667!
test03BooksCanBeAddedOneAtATimeToCart

	|cart|
	
	cart := Cart new.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3; yourself) equals: cart books! !

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:28:33'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:28:33'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:28:33'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:28:33'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:32:00'!
test03BooksCanBeAddedWithMultipleOccurrences

	|cart|
	
	cart := Cart new.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3; yourself) equals: cart books! !

!methodRemoval: TusLibrosTest #test03BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:32:00'!
test03BooksCanBeAddedOneAtATimeToCart

	|cart|
	
	cart := Cart new.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3; yourself) equals: cart books!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:35:34'!
test04CannotAddNonPositiveAmountOfBooks

	|cart|
	
	cart := Cart new.
	
	self 
		should: [cart add: '1' withAmount: 0.] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'La cantidad de unidades del libro a agregar debe ser mayor a cero.']
	
	! !

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:35:36'!
FAILURE!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:35:36'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:36:10' prior: 50642610!
add: aBookISBN withAmount: anAmount
	
	anAmount < 1 ifTrue: [self error: 'La cantidad de unidades del libro a agregar debe ser mayor a cero.'].
	
	books add: aBookISBN withOccurrences: anAmount ! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:36:12'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:36:12'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:36:12'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:36:12'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:36:47'!
signalNonPositiveBookUnits

	^ self error: 'La cantidad de unidades del libro a agregar debe ser mayor a cero.'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:36:47' prior: 50642744!
add: aBookISBN withAmount: anAmount
	
	anAmount < 1 ifTrue: [self signalNonPositiveBookUnits].
	
	books add: aBookISBN withOccurrences: anAmount ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:37:33' prior: 50642766!
signalNonPositiveBookUnits

	^ self error: self class nonPositiveBookUnitsErrorMessage! !
!Cart class methodsFor: 'nil' stamp: 'FP 6/7/2023 00:37:48'!
nonPositiveBookUnitsErrorMessage 

	^'La cantidad de unidades del libro a agregar debe ser mayor a cero.'! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:37:50'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:37:50'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:37:50'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:37:50'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:38:59'!
assertAmountOfBooksIsPositive: anAmount

	^ anAmount < 1 ifTrue: [self signalNonPositiveBookUnits]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:38:59' prior: 50642773!
add: aBookISBN withAmount: anAmount
	
	self assertAmountOfBooksIsPositive: anAmount.
	
	books add: aBookISBN withOccurrences: anAmount ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:39:27' prior: 50642725!
test04CannotAddNonPositiveAmountOfBooks

	|cart|
	
	cart := Cart new.
	
	self 
		should: [cart add: '1' withAmount: 0.] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart nonPositiveBookUnitsErrorMessage ]
	
	! !

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:39:28'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:39:28'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:39:28'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:39:28'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:39:28'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:45:32'!
test05CannotAddBooksNotInCatalog

	|cart stock|
	
	stock := Set with: '1' with: '2' with: '3'.
	
	cart := Cart withStock: stock.
	
	self 
		should: [cart add: '4'] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'No se puede agregar un libro que no pertenece al catalogo.' ]
	
	! !

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:45:34'!
ERROR!

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:45:34'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FP 6/7/2023 00:45:40'!
withStock: aSet 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithStock: aSet ! !
!Cart class methodsFor: 'instance creation' stamp: 'FP 6/7/2023 00:45:51' prior: 50642865!
withStock: aCatalog

	^self new initializeWithStock: aCatalog ! !

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:45:52'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FP 6/7/2023 00:45:56'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'FP 6/7/2023 00:45:56'!
initializeWithStock: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FP 6/7/2023 00:46:12' prior: 50642887!
initializeWithStock: aCatalog 

	catalog := aCatalog.
	books := Bag new! !

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:46:16'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:47:00' prior: 50642530!
add: aBookISBN 
	
	(catalog includes: aBookISBN) ifFalse: [self error: 'No se puede agregar un libro que no pertenece al catalogo.'].
	
	books add: aBookISBN ! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:47:01'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:47:01'!
ERROR!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:47:01'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:47:01'!
PASSED!

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:47:01'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:47:01'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:47:26'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:47:40' prior: 50642577!
test02BooksCanBeAddedOneAtATimeToCart

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart new.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart books! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:47:46' prior: 50642933!
test02BooksCanBeAddedOneAtATimeToCart

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart withStock: catalog.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart books! !

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:47:47'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:47:56' prior: 50642707!
test03BooksCanBeAddedWithMultipleOccurrences

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart withStock: catalog.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3; yourself) equals: cart books! !

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:47:58'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:03' prior: 50642819!
test04CannotAddNonPositiveAmountOfBooks

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart withStock: catalog.
	
	self 
		should: [cart add: '1' withAmount: 0.] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart nonPositiveBookUnitsErrorMessage ]
	
	! !

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:48:04'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:10' prior: 50642846!
test05CannotAddBooksNotInCatalog

	|cart catalog|
	
	catalog := Set with: '1' with: '2' with: '3'.
	
	cart := Cart withStock: catalog.
	
	self 
		should: [cart add: '4'] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'No se puede agregar un libro que no pertenece al catalogo.' ]
	
	! !
!Cart class methodsFor: 'instance creation' stamp: 'FP 6/7/2023 00:48:20'!
withCatalog: aCatalog

	^self new initializeWithStock: aCatalog ! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:20' prior: 50642955!
test03BooksCanBeAddedWithMultipleOccurrences

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart withCatalog: catalog.
	cart add: '1' withAmount: 3.
	
	self assert: (Bag new add: '1' withOccurrences: 3; yourself) equals: cart books! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:20' prior: 50642942!
test02BooksCanBeAddedOneAtATimeToCart

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart withCatalog: catalog.
	cart add: '1'.
	
	self assert: (Bag with: '1') equals: cart books! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:20' prior: 50642969!
test04CannotAddNonPositiveAmountOfBooks

	|cart catalog|
	
	catalog := Set with: '1'.
	cart := Cart withCatalog: catalog.
	
	self 
		should: [cart add: '1' withAmount: 0.] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart nonPositiveBookUnitsErrorMessage ]
	
	! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:20' prior: 50642985!
test05CannotAddBooksNotInCatalog

	|cart catalog|
	
	catalog := Set with: '1' with: '2' with: '3'.
	
	cart := Cart withCatalog: catalog.
	
	self 
		should: [cart add: '4'] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: 'No se puede agregar un libro que no pertenece al catalogo.' ]
	
	! !

!methodRemoval: Cart class #withStock: stamp: 'FP 6/7/2023 00:48:20'!
withStock: aCatalog

	^self new initializeWithStock: aCatalog !

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:48:34'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:59'!
signalBookNotInCatalog

	^ self error: 'No se puede agregar un libro que no pertenece al catalogo.'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:48:59' prior: 50642902!
add: aBookISBN 
	
	(catalog includes: aBookISBN) ifFalse: [self signalBookNotInCatalog].
	
	books add: aBookISBN ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:49:12'!
assertBookIsInCatalog: aBookISBN

	^ (catalog includes: aBookISBN) ifFalse: [self signalBookNotInCatalog]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:49:12' prior: 50643063!
add: aBookISBN 
	
	self assertBookIsInCatalog: aBookISBN.
	
	books add: aBookISBN ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:49:47'!
bookNotInCatalogErrorMessage

	^ 'No se puede agregar un libro que no pertenece al catalogo.'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:49:47' prior: 50643057!
signalBookNotInCatalog

	^ self error: self bookNotInCatalogErrorMessage! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:50:04'!
bookNotInCatalogErrorMessage

	^ 'No se puede agregar un libro que no pertenece al catalogo.'! !

!methodRemoval: Cart #bookNotInCatalogErrorMessage stamp: 'FP 6/7/2023 00:50:04'!
bookNotInCatalogErrorMessage

	^ 'No se puede agregar un libro que no pertenece al catalogo.'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:50:14' prior: 50643087!
signalBookNotInCatalog

	^ self error: self class bookNotInCatalogErrorMessage! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:50:15'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:50:15'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:50:15'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:50:15'!
PASSED!

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:50:15'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:51:26' prior: 50642811!
add: aBookISBN withAmount: anAmount
	
	self assertBookIsInCatalog: aBookISBN.
	self assertAmountOfBooksIsPositive: anAmount.
	
	books add: aBookISBN withOccurrences: anAmount ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:51:44' prior: 50643076!
add: aBookISBN 
	
	self add:  aBookISBN withAmount: 1! !

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:51:46'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:51:46'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:51:46'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:51:46'!
PASSED!

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:51:46'!
PASSED!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'FP 6/7/2023 00:52:35' prior: 50643037!
test05CannotAddBooksNotInCatalog

	|cart catalog|
	
	catalog := Set with: '1' with: '2' with: '3'.
	
	cart := Cart withCatalog: catalog.
	
	self 
		should: [cart add: '4'] 
		raise:  Error
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart bookNotInCatalogErrorMessage ]
	
	! !

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:52:36'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartStartsEmpty stamp: 'FP 6/7/2023 00:52:36'!
PASSED!

!testRun: #TusLibrosTest #test02BooksCanBeAddedOneAtATimeToCart stamp: 'FP 6/7/2023 00:52:36'!
PASSED!

!testRun: #TusLibrosTest #test03BooksCanBeAddedWithMultipleOccurrences stamp: 'FP 6/7/2023 00:52:36'!
PASSED!

!testRun: #TusLibrosTest #test04CannotAddNonPositiveAmountOfBooks stamp: 'FP 6/7/2023 00:52:36'!
PASSED!

!testRun: #TusLibrosTest #test05CannotAddBooksNotInCatalog stamp: 'FP 6/7/2023 00:52:36'!
PASSED!

----QUIT----(7 June 2023 00:55:11) CuisUniversity-5832.image priorSource: 9945892!

----STARTUP---- (8 June 2023 17:07:09) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


!classRemoval: #Cart stamp: 'FP 6/8/2023 19:45:24'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosTest stamp: 'FP 6/8/2023 19:45:24'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/repoMateria/2023-1c/09-TusLibros/Iteracion1/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/8/2023 19:46:10'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FP 6/8/2023 19:46:25'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/8/2023 19:58:21'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'FP 6/8/2023 19:57:50'!
test01CannotCheckoutEmptyCart
	
	|aCashier emptyCart|
	
	aCashier := Cashier new.
	emptyCart := (Cart acceptingitemsof: OrderedCollection new).
	
	self 
		should:  [aCashier checkout: emptyCart withcard: '1234 12/18']
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio.']! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 19:58:28'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 19:58:28'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 19:58:41' prior: 50643433!
test01CannotCheckoutEmptyCart
	
	|aCashier emptyCart|
	
	aCashier := Cashier new.
	emptyCart := (aCashier acceptingitemsof: OrderedCollection new).
	
	self 
		should:  [aCashier checkout: emptyCart withcard: '1234 12/18']
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio.']! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 19:58:42'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 19:58:42'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 19:59:22' prior: 50643454!
test01CannotCheckoutEmptyCart
	
	|aCashier emptyCart|
	
	aCashier := Cashier new.
	emptyCart := (Cart acceptingItemsOf: Bag new).
	
	self 
		should:  [aCashier checkout: emptyCart withcard: '1234 12/18']
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio.']! !
!Cart methodsFor: 'initialization' stamp: 'FP 6/8/2023 19:59:29' prior: 50643240!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/8/2023 19:59:31'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 19:59:43'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 19:59:43'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 20:00:59' prior: 50643475!
test01CannotCheckoutEmptyCart
	
	|aCashier emptyCart|
	
	aCashier := Cashier new.
	emptyCart := (Cart acceptingItemsOf: Bag new).
	
	self 
		should:  [aCashier checkout: emptyCart withcard: '1234 12/18']
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio.']! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:01:00'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:01:00'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:01:15'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:01:15'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 20:01:43'!
checkout: emptyCart withcard: aRenameMe1 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 20:02:19' prior: 50643552!
checkout: aCartToCheckout withcard: aCard 
	
	^'No se puede hcaer checkout de un carrito vacio.'
	! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:02:20'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 20:03:18' prior: 50643558!
checkout: aCartToCheckout withcard: aCard 
	
	self error: 'No se puede hacer checkout de un carrito vacio.'! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:03:20'!
PASSED!

April/2021!
!Cart methodsFor: 'initialization' stamp: 'FP 6/8/2023 20:22:07' prior: 50643489!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/8/2023 20:22:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/8/2023 20:22:09'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'FP 6/8/2023 20:22:30' prior: 50643577!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/8/2023 20:22:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/8/2023 20:22:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 20:26:49'!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice
	
	|aCashier cartWithOneItem priceList|
	
	priceList := Dictionary new.
	priceList at: 'Book A' put: 27.
	
	cartWithOneItem := (Cart acceptingItemsOf: priceList ).
	cartWithOneItem add: 'Book A'.
	
	aCashier := Cashier withPriceList: priceList .
	
	
	self assert: 27 equals: (aCashier checkout: cartWithOneItem withcard: '1234 12/18') ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/8/2023 20:26:56' prior: 50643526!
test01CannotCheckoutEmptyCart
	
	|aCashier emptyCart|
	
	aCashier := Cashier new.
	emptyCart := (Cart acceptingItemsOf: Set new).
	
	self 
		should:  [aCashier checkout: emptyCart withcard: '1234 12/18']
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio.']! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:26:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/8/2023 20:27:24'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/8/2023 20:27:24'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FP 6/8/2023 20:30:47' prior: 50643258!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity 
	! !
!Cart methodsFor: 'assertions' stamp: 'FP 6/8/2023 20:31:02' prior: 50643227!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/8/2023 20:31:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 20:31:03'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/8/2023 20:31:03'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/8/2023 20:31:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/8/2023 20:31:03'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/8/2023 20:31:03'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/8/2023 20:31:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/8/2023 20:31:03'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:31:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/8/2023 20:31:03'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 20:31:04'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/8/2023 20:31:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/8/2023 20:31:19'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/8/2023 20:31:19'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/8/2023 20:31:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/8/2023 20:31:19'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/8/2023 20:31:19'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/8/2023 20:31:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/8/2023 20:31:19'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/8/2023 20:31:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/8/2023 20:31:19'!
ERROR!

----QUIT----(8 June 2023 21:16:28) CuisUniversity-5832.image priorSource: 9969169!

----STARTUP---- (10 June 2023 23:02:18) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


!classRemoval: #Cashier stamp: 'FP 6/10/2023 23:03:23'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FP 6/10/2023 23:03:23'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FP 6/10/2023 23:03:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FP 6/10/2023 23:03:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/repoMateria/2023-1c/09-TusLibros/Iteracion1/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:03:34'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FP 6/10/2023 23:03:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/10/2023 23:11:52'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'FP 6/10/2023 23:11:43'!
test01CannotCheckoutEmptyCart

	|salesBook|
	
	salesBook := OrderedCollection new.
	self 
		should:  [Cashier withCart: Cart new chargingFrom: '1234 9/12' registeringOn: salesBook]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:11:55'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:11:55'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:12:02'!
withCart: aCart chargingFrom: aString registeringOn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCart: aCart chargingFrom: aString registeringOn: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:12:36' prior: 50644040!
withCart: aCart chargingFrom: aCard registeringOn: aSalesBook 

	^self new initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook ! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:12:37'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/10/2023 23:12:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/10/2023 23:12:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/10/2023 23:12:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FP 6/10/2023 23:12:44'!
initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook 
	self shouldBeImplemented.
	cart := aCart.
	card := aCard.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'FP 6/10/2023 23:12:58' prior: 50644083!
initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook 

	cart := aCart.
	card := aCard.
	salesBook := aSalesBook.! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:12:59'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:14:53' prior: 50644052!
withCart: aCart chargingFrom: aCard registeringOn: aSalesBook 

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio.']. 
		
	^self new initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:14:55'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:14:55'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:14:55'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:15:11'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:15:11'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:15:56'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:15:56'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:17:21' prior: 50644019!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart|
	
	salesBook := OrderedCollection new.
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	self 
		should:  [Cashier withCart: emptyCart chargingFrom: '1234 9/12' registeringOn: salesBook]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:17:23'!
FAILURE!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:17:23'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:17:40' prior: 50644102!
withCart: aCart chargingFrom: aCard registeringOn: aSalesBook 

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
		
	^self new initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:17:42'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:17:42'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:23:58'!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook pricedCatalog priceList|
	
	salesBook := OrderedCollection new.
	
	priceList := Dictionary new.
	priceList at: 'Book A' put: 25.
	pricedCatalog := Cart acceptingItemsOf: priceList.
	
	self assert: 25 equals: (Cashier withCart: pricedCatalog chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:24:05'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:24:05'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:25:09' prior: 50644219!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement priceList|
	
	salesBook := OrderedCollection new.
	
	priceList := Dictionary new.
	priceList at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: priceList.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:25:14' prior: 50644244!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedElement|
	
	salesBook := OrderedCollection new.
	
	pricedElement := Dictionary new.
	pricedElement at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedElement.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:25:20' prior: 50644262!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog|
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:25:32' prior: 50644280!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog|
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:25:34'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:25:34'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:25:43'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:25:43'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'FP 6/10/2023 23:25:55' prior: 50643812!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:25:56'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:26:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:26:08'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:26:08'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:26:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:26:08'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:26:08'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:26:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:26:08'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:26:10'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'FP 6/10/2023 23:27:25' prior: 50643964!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put: '0'.! !
!CartTest methodsFor: 'support' stamp: 'FP 6/10/2023 23:27:29' prior: 50644371!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put: 0.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:27:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:27:36'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:27:36'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:27:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:27:36'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:27:36'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:27:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:27:36'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'FP 6/10/2023 23:28:36' prior: 50643835!
includes: anItem

	^items includesKey: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:28:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:28:46'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:28:46'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:28:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:28:46'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:28:46'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:28:46'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:28:46'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FP 6/10/2023 23:29:23' prior: 50643825!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'FP 6/10/2023 23:30:14' prior: 50643843!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity ! !
!Cart methodsFor: 'testing' stamp: 'FP 6/10/2023 23:30:30' prior: 50644406!
includes: anItem

	^items includes: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:30:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:30:47'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:30:47'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:30:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:30:47'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:30:47'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:30:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:30:47'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:30:49'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:31:24'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'FP 6/10/2023 23:33:25' prior: 50644376!
defaultCatalog

	|pricedCatalog|
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: self itemSellByTheStore put: 0.
	
	^pricedCatalog ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:33:26'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:33:42'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:33:42'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:33:42'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:33:47'!
checkout
	self shouldBeImplemented.! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:35:15'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:35:15'!
ERROR!
!Cart methodsFor: 'nil' stamp: 'FP 6/10/2023 23:35:35'!
items

	^items copy! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:35:42'!
pricedCatalog

	^catalog ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:35:47' prior: 50644542!
pricedCatalog

	^catalog copy! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:37:31' prior: 50644528!
checkout
	
	|pricedCatalog total|
	
	pricedCatalog := cart pricedCatalog.
	total := pricedCatalog at: cart items first.
	
	salesBook add: total.
	
	^total! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:37:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:37:41'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:37:41'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:40:13' prior: 50644550!
checkout
	
	|pricedCatalog total|
	
	pricedCatalog := cart pricedCatalog.
	total := pricedCatalog at: cart items asOrderedCollection first.
		
	
	salesBook add: total.
	
	^total! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:40:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:40:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:42:21'!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog|
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/10/2023 23:42:40'!
FAILURE!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/10/2023 23:42:40'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:44:04' prior: 50644569!
checkout
	
	|pricedCatalog total|
	
	total := 0.
	pricedCatalog := cart pricedCatalog.
	
	cart items do: [:anItem | total := total + pricedCatalog at: anItem].
	
	salesBook add: total.
	
	^total! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:44:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/10/2023 23:44:06'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:45:05' prior: 50644640!
checkout
	
	|pricedCatalog total|
	

	pricedCatalog := cart pricedCatalog.
	
	total := cart items 
		inject: 0
		into: [:subtotal :anItem | subtotal + pricedCatalog at: anItem].
	
	salesBook add: total.
	
	^total! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:45:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/10/2023 23:45:06'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:45:43' prior: 50644686!
checkout
	
	|total|
	

	total := cart items 
		inject: 0
		into: [:subtotal :anItem | subtotal + cart pricedCatalog at: anItem].
	
	salesBook add: total.
	
	^total! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/10/2023 23:45:48'!
PASSED!

!classDefinition: #Card category: 'TusLibros' stamp: 'FP 6/10/2023 23:54:08'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:54:04'!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard|
	
	expiredCard := Card validUntil: April/2023.
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: June/2023 registeringOn: salesBook) checkout] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:57:13' prior: 50644783!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard|
	
	expiredCard := Card validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: (June of: 2023) registeringOn: salesBook) checkout] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:57:17'!
ERROR!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:57:17'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:57:23'!
validUntil: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidUntil: aGregorianMonthOfYear ! !
!Card class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:57:35' prior: 50644833!
validUntil: aGregorianMonthOfYear 

	^self new initializeValidUntil: aGregorianMonthOfYear ! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:57:36'!
ERROR!

!classDefinition: #Card category: 'TusLibros' stamp: 'FP 6/10/2023 23:57:51'!
Object subclass: #Card
	instanceVariableNames: 'gregorianMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialization' stamp: 'FP 6/10/2023 23:57:51'!
initializeValidUntil: aGregorianMonthOfYear 
	self shouldBeImplemented.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !
!Card methodsFor: 'initialization' stamp: 'FP 6/10/2023 23:58:04' prior: 50644858!
initializeValidUntil: aGregorianMonthOfYear 

	gregorianMonthOfYear := aGregorianMonthOfYear.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'FP 6/10/2023 23:58:11'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:58:11' prior: 50644865!
initializeValidUntil: aGregorianMonthOfYear 

	expirationDate := aGregorianMonthOfYear.! !
!Card methodsFor: 'initialization' stamp: 'FP 6/10/2023 23:58:22' prior: 50644878!
initializeValidUntil: anExpirationDate 

	expirationDate := anExpirationDate.! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:58:24'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'FP 6/10/2023 23:58:43' prior: 50644842!
validUntil: anExpirationDate 

	^self new initializeValidUntil: anExpirationDate ! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:59:00'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:59:00'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:59:17' prior: 50644805!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard|
	
	expiredCard := Card validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: (June of: 2023) registeringOn: salesBook) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:59:18'!
ERROR!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/10/2023 23:59:18'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/10/2023 23:59:29'!
withCart: cart chargingFrom: expiredCard onDate: aRenameMe1 registeringOn: salesBook 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:00:26' prior: 50644935!
withCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
		
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/11/2023 00:01:33'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card salesBook chargingDay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FP 6/11/2023 00:01:32'!
initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 

	cart := aCart.
	card := aCard.
	salesBook := aSalesBook.
	chargingDay := aDate.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/11/2023 00:04:22'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card salesBook chargingDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:04:22' prior: 50644961!
initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 

	cart := aCart.
	card := aCard.
	salesBook := aSalesBook.
	chargingDate := aDate.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:05:32' prior: 50644942!
withCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
	(aCard expirationDate > aDate ) ifTrue: [self error: 'Tarjeta vencida'].
	
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook ! !
!Card methodsFor: 'nil' stamp: 'FP 6/11/2023 00:06:00'!
expirationDate

	^expirationDate ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:06:02'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:06:02'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:06:02'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:06:05'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:06:05'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:06:05'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:07:16' prior: 50644986!
withCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
	(aDate <= aCard expirationDate ) ifFalse: [self error: 'Tarjeta vencida'].
	
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:07:18'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:07:18'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:07:18'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:07:27' prior: 50645089!
withCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
	(aDate <= aCard expirationDate ) ifFalse: [self error: 'Tarjeta vencida.'].
	
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:08:04' prior: 50645146!
withCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
	(aCard expirationDate < aDate ) ifTrue: [self error: 'Tarjeta vencida.'].
	
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:08:07'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:08:07'!
PASSED!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:08:26' prior: 50645160!
withCart: aCart chargingFrom: aCard onDate: aChargingDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
	(aCard expirationDate < aChargingDate ) ifTrue: [self error: 'Tarjeta vencida.'].
	
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aChargingDate registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:08:36' prior: 50645214!
withCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook 
	
	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
	(aCardToCharge expirationDate < aChargingDate ) ifTrue: [self error: 'Tarjeta vencida.'].
	
	^self new initializeWithCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:09:21' prior: 50644610!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card|
	
	card := Card validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: '1234 9/12' registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:09:46' prior: 50645245!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card|
	
	card := Card validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: card onDate: June/2023 registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:10:21' prior: 50644298!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card |
	
	card := Card validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: card onDate: June/2023 registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:10:27'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:10:43' prior: 50645292!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card |
	
	card := Card validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:11:07' prior: 50644156!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart card |
	
	card := Card validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	self 
		should:  [Cashier withCart: emptyCart chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:11:10'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:11:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:11:19' prior: 50645268!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card|
	
	card := Card validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:11:20'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:11:21'!
PASSED!

!methodRemoval: Cashier class #withCart:chargingFrom:registeringOn: stamp: 'FP 6/11/2023 00:11:25'!
withCart: aCart chargingFrom: aCard registeringOn: aSalesBook 

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']. 
		
	^self new initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook !

!methodRemoval: Cashier #initializeWithCart:chargingFrom:registeringOn: stamp: 'FP 6/11/2023 00:11:28'!
initializeWithCart: aCart chargingFrom: aCard registeringOn: aSalesBook 

	cart := aCart.
	card := aCard.
	salesBook := aSalesBook.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:12:39'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio']! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:12:39' prior: 50645229!
withCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook 
	
	self assertCartIsNotEmpty: aCart. 
	(aCardToCharge expirationDate < aChargingDate ) ifTrue: [self error: 'Tarjeta vencida.'].
	
	^self new initializeWithCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:13:25' prior: 50645421!
withCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook 
	
	self assertCartIsNotEmpty: aCart. 
	self assertCard: aCardToCharge isNotExpiredOnDate: aChargingDate 
	
	^self new initializeWithCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:13:33'!
assertCard: aCardToCharge isNotExpiredOnDate: aChargingDate 
	
	(aCardToCharge expirationDate < aChargingDate ) ifTrue: [self error: 'Tarjeta vencida.'].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:13:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:13:36'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:13:36'!
ERROR!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:13:36'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:13:43' prior: 50645435!
withCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook 
	
	self assertCartIsNotEmpty: aCart. 
	self assertCard: aCardToCharge isNotExpiredOnDate: aChargingDate.
	
	^self new initializeWithCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:13:44'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:13:44'!
PASSED!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:13:59'!
expiredCardErrorMessage

	^ 'Tarjeta vencida.'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:13:59' prior: 50645448!
assertCard: aCardToCharge isNotExpiredOnDate: aChargingDate 
	
	(aCardToCharge expirationDate < aChargingDate ) ifTrue: [self error: self expiredCardErrorMessage].! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:14:10'!
emptyCartErrorMessage

	^ 'No se puede hacer checkout de un carrito vacio'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 00:14:10' prior: 50645414!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:18:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 00:19:45'!
PASSED!

----QUIT----(11 June 2023 00:19:50) CuisUniversity-5832.image priorSource: 9987525!

----STARTUP---- (11 June 2023 23:05:55) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'FP 6/11/2023 23:19:30'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:19:23'!
test04CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: (June of: 2023) registeringOn: salesBook) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:21:27' prior: 50645666!
test04CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:21:35'!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !

!methodRemoval: CashierTest #test04CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:21:35'!
test04CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:21:40'!
ERROR!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:21:40'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/11/2023 23:21:45'!
withCart: aCart chargingFrom: aCard onDate: aGregorianMonthOfYear registeringOn: anOrderedCollection withMerchantProcessor: aMerchantProcessor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aGregorianMonthOfYear registeringOn: anOrderedCollection withMerchantProcessor: aMerchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/11/2023 23:22:21' prior: 50645784!
withCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook withMerchantProcessor: aMerchantProcessor 


	^self new initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook withMerchantProcessor: aMerchantProcessor ! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:22:22'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/11/2023 23:22:26'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card salesBook chargingDate date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FP 6/11/2023 23:22:26'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card salesBook chargingDate date merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FP 6/11/2023 23:22:26'!
initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook withMerchantProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	cart := aCart.
	card := aCard.
	date := aDate.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'FP 6/11/2023 23:22:31' prior: 50645830!
initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook withMerchantProcessor: aMerchantProcessor 

	cart := aCart.
	card := aCard.
	date := aDate.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:22:33'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'FP 6/11/2023 23:25:22' prior: 50644732!
checkout
	
	|total| 
	
	total := cart items 
		inject: 0
		into: [:subtotal :anItem | subtotal + cart pricedCatalog at: anItem].
	
	merchantProcessor debit: total from: card.
	salesBook add: total.
	
	^total! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:25:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:25:28'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:25:28'!
ERROR!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:25:28'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:25:28'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:25:31'!
ERROR!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:25:44'!
ERROR!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:25:44'!
ERROR!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:25:51'!
debit: total from: aCard 
	self shouldBeImplemented.! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:29:39' prior: 50645894!
debit: total from: aCreditCard 
	
	(aCreditCard number = 999) ifTrue: [self error: 'Tarjeta sin saldo.']! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:29:46' prior: 50645899!
debit: total from: aCreditCard 
	
	(aCreditCard number = 999) ifTrue: [self error: 'Tarjeta sin saldo']! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:29:58' prior: 50645906!
debit: total from: aCreditCard 
	
	(aCreditCard number = 999) ifTrue: [self error: 'Tarjeta sin saldo.']! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:29:59'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'FP 6/11/2023 23:31:12'!
withNumber: aNumber validUntil: anExpirationDate 

	^self new initializeValidUntil: anExpirationDate ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:31:12' prior: 50644906!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard|
	
	expiredCard := Card withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: (June of: 2023) registeringOn: salesBook) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:31:12' prior: 50645317!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card |
	
	card := Card withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:31:12' prior: 50645720!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:31:12' prior: 50645338!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart card |
	
	card := Card withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	self 
		should:  [Cashier withCart: emptyCart chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:31:12' prior: 50645365!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card|
	
	card := Card withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !

!methodRemoval: Card class #validUntil: stamp: 'FP 6/11/2023 23:31:12'!
validUntil: anExpirationDate 

	^self new initializeValidUntil: anExpirationDate !
!Card methodsFor: 'initialization' stamp: 'FP 6/11/2023 23:32:04'!
initializeWithNumber: aNumber initializeValidUntil: anExpirationDate 

	expirationDate := anExpirationDate.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:32:04' prior: 50645923!
withNumber: aNumber validUntil: anExpirationDate 

	^self new initializeWithNumber: 1234 initializeValidUntil: anExpirationDate ! !

!methodRemoval: Card #initializeValidUntil: stamp: 'FP 6/11/2023 23:32:04'!
initializeValidUntil: anExpirationDate 

	expirationDate := anExpirationDate.!
!Card methodsFor: 'initialization' stamp: 'FP 6/11/2023 23:32:15'!
initializeWithNumber: aNumber ValidUntil: anExpirationDate 

	expirationDate := anExpirationDate.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:32:15' prior: 50646060!
withNumber: aNumber validUntil: anExpirationDate 

	^self new initializeWithNumber: 1234 ValidUntil: anExpirationDate ! !

!methodRemoval: Card #initializeWithNumber:initializeValidUntil: stamp: 'FP 6/11/2023 23:32:15'!
initializeWithNumber: aNumber initializeValidUntil: anExpirationDate 

	expirationDate := anExpirationDate.!

!classDefinition: #Card category: 'TusLibros' stamp: 'FP 6/11/2023 23:32:27'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialization' stamp: 'FP 6/11/2023 23:32:25' prior: 50646072!
initializeWithNumber: aNumber ValidUntil: anExpirationDate 

	number := aNumber.
	expirationDate := anExpirationDate.! !
!Card methodsFor: 'initialization' stamp: 'FP 6/11/2023 23:32:45'!
initializeWithNumber: aNumber validUntil: anExpirationDate 

	number := aNumber.
	expirationDate := anExpirationDate.! !
!Card class methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:32:45' prior: 50646079!
withNumber: aNumber validUntil: anExpirationDate 

	^self new initializeWithNumber: 1234 validUntil: anExpirationDate ! !

!methodRemoval: Card #initializeWithNumber:ValidUntil: stamp: 'FP 6/11/2023 23:32:45'!
initializeWithNumber: aNumber ValidUntil: anExpirationDate 

	number := aNumber.
	expirationDate := anExpirationDate.!
!Card methodsFor: 'nil' stamp: 'FP 6/11/2023 23:32:53'!
number 

	^number ! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:32:56'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:32:56'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:33:14'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:33:14'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:34:10'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:34:10'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:34:47' prior: 50645976!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:34:48'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:34:48'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:35:13' prior: 50646150!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:35:14'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:35:14'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:35:33' prior: 50646186!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
			
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:35:35'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:35:35'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:36:07' prior: 50646222!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout.
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:36:09'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:36:09'!
FAILURE!
!Card class methodsFor: 'instance creation' stamp: 'FP 6/11/2023 23:37:48' prior: 50646112!
withNumber: aNumber validUntil: anExpirationDate 

	^self new initializeWithNumber: aNumber validUntil: anExpirationDate ! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:37:53'!
ERROR!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:37:53'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:03' prior: 50646258!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := Card withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:38:05'!
PASSED!

!classRenamed: #Card as: #CreditCard stamp: 'FP 6/11/2023 23:38:16'!
Smalltalk renameClassNamed: #Card as: #CreditCard!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:16' prior: 50645930!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard|
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: (June of: 2023) registeringOn: salesBook) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:16' prior: 50645954!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:16' prior: 50646314!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:16' prior: 50646005!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart card |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	self 
		should:  [Cashier withCart: emptyCart chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:16' prior: 50646025!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card|
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:38:39' prior: 50646350!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart chargingFrom: expiredCard onDate: (June of: 2023) registeringOn: salesBook) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:39:30' prior: 50646471!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: cart 
				chargingFrom: expiredCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:39:32'!
FAILURE!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:39:32'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:39:49' prior: 50646446!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card merchantProcessorSimulator |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier withCart: cartWithManyItems chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:40:14' prior: 50646532!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card merchantProcessorSimulator |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: cartWithManyItems 
							chargingFrom: card 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:40:20' prior: 50646374!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card merchantProcessorSimulator |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self assert: 25 equals: (Cashier withCart: cartWithOneElement chargingFrom: card onDate: (June of: 2023) registeringOn: salesBook) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:40:41' prior: 50646589!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card merchantProcessorSimulator |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: card 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: merchantProcessorSimulator ) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:40:42' prior: 50646614!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card merchantProcessorSimulator |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: card 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:41:21' prior: 50646425!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart card merchantProcessorSimulator |
	
	card := CreditCard withNumber: 1234 validUntil: (November of: 2023).
	salesBook := OrderedCollection new.
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should:  [Cashier 
				withCart: emptyCart 
				chargingFrom: card 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: merchantProcessorSimulator]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!Cashier class methodsFor: 'instance creation' stamp: 'FP 6/11/2023 23:42:00' prior: 50645800!
withCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	self assertCartIsNotEmpty: aCart. 
	self assertCard: aCardToCharge isNotExpiredOnDate: aChargingDate.

	^self new initializeWithCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook withMerchantProcessor: aMerchantProcessor ! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:42:04'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:42:04'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:42:04'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:42:04'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:42:04'!
PASSED!

!methodRemoval: Cashier class #withCart:chargingFrom:onDate:registeringOn: stamp: 'FP 6/11/2023 23:42:10'!
withCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook 
	
	self assertCartIsNotEmpty: aCart. 
	self assertCard: aCardToCharge isNotExpiredOnDate: aChargingDate.
	
	^self new initializeWithCart: aCart chargingFrom: aCardToCharge onDate: aChargingDate registeringOn: aSalesBook !

!methodRemoval: Cashier #initializeWithCart:chargingFrom:onDate:registeringOn: stamp: 'FP 6/11/2023 23:42:13'!
initializeWithCart: aCart chargingFrom: aCard onDate: aDate registeringOn: aSalesBook 

	cart := aCart.
	card := aCard.
	salesBook := aSalesBook.
	chargingDate := aDate.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:46:22'!
test06CannotCheckoutChargingStolenCard

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:46:23'!
FAILURE!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:46:23'!
FAILURE!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:46:42' prior: 50645913!
debit: total from: aCreditCard 
	
	(aCreditCard number = 999) ifTrue: [self error: 'Tarjeta sin saldo.'].
	(aCreditCard number = 888) ifTrue: [self error: 'Tarjeta robada.']! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:46:45'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:46:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:52:28'!
validCreditCard

	^ CreditCard withNumber: 1234 validUntil: (November of: 2023)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:52:28' prior: 50646668!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	emptyCart := Cart acceptingItemsOf: OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should:  [Cashier 
				withCart: emptyCart 
				chargingFrom: card 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: merchantProcessorSimulator]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:52:28' prior: 50646559!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: cartWithManyItems 
							chargingFrom: card 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:52:28' prior: 50646641!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: card 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:52:30'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:52:30'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:53:00'!
emptyCart

	^ Cart acceptingItemsOf: OrderedCollection new! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:53:00' prior: 50646845!
test01CannotCheckoutEmptyCart

	|salesBook emptyCart card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	emptyCart := self emptyCart.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should:  [Cashier 
				withCart: emptyCart 
				chargingFrom: card 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: merchantProcessorSimulator]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:53:06' prior: 50646975!
test01CannotCheckoutEmptyCart

	|salesBook card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should:  [Cashier 
				withCart: self emptyCart 
				chargingFrom: card 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: merchantProcessorSimulator]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:53:17' prior: 50646998!
test01CannotCheckoutEmptyCart

	|salesBook card |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	self 
		should:  [Cashier 
				withCart: self emptyCart 
				chargingFrom: card 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: MerchantProcessor new]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:53:49' prior: 50647020!
test01CannotCheckoutEmptyCart

	|salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should:  [Cashier 
				withCart: self emptyCart 
				chargingFrom: self validCreditCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: MerchantProcessor new]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:54:07' prior: 50647039!
test01CannotCheckoutEmptyCart

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self 
		should:  [Cashier 
				withCart: self emptyCart 
				chargingFrom: self validCreditCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: MerchantProcessor new]
		raise:  Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'No se puede hacer checkout de un carrito vacio'.
			self assert: salesBook isEmpty]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:54:18' prior: 50646898!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:54:30' prior: 50647077!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog |
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:55:08' prior: 50647103!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog |
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog; add: 'Book A'; yourself.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:55:19'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:55:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:55:19'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:54:30' prior: 50647126!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog |
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:55:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:55:43'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:55:45'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:55:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:56:45'!
pricedCatalog
	
	|pricedCatalog|
	
	pricedCatalog := Dictionary new.
	pricedCatalog at: 'Book A' put: 25.
	pricedCatalog at: 'Book B' put: 10.

	^pricedCatalog ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:56:57' prior: 50647198!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement pricedCatalog |
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := self pricedCatalog.
	cartWithOneElement := Cart acceptingItemsOf: pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:56:58'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:01' prior: 50647283!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement |
	
	salesBook := OrderedCollection new.
	
	cartWithOneElement := Cart acceptingItemsOf: self pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:11' prior: 50646869!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems pricedCatalog card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	
	pricedCatalog := self pricedCatalog.

	cartWithManyItems := Cart acceptingItemsOf: pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: cartWithManyItems 
							chargingFrom: card 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:12' prior: 50647329!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	
	cartWithManyItems := Cart acceptingItemsOf: self pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: cartWithManyItems 
							chargingFrom: card 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:57:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:23' prior: 50646497!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := self pricedCatalog.

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.
		
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: cart 
				chargingFrom: expiredCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:24' prior: 50647385!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: self pricedCatalog.
	cart add: 'Book A'.
		
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: cart 
				chargingFrom: expiredCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:30' prior: 50646396!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := self pricedCatalog .

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:31' prior: 50647439!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: self pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:43' prior: 50646749!
test06CannotCheckoutChargingStolenCard

	|salesBook cart pricedCatalog expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	pricedCatalog := self pricedCatalog .

	cart := Cart acceptingItemsOf: pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:57:43' prior: 50647493!
test06CannotCheckoutChargingStolenCard

	|salesBook cart expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	cart := Cart acceptingItemsOf: self pricedCatalog.
	cart add: 'Book A'.

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/11/2023 23:57:46'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/11/2023 23:57:46'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:58:26'!
cartWithOneItem
	
	| cartWithOneElement |
	
	cartWithOneElement := Cart acceptingItemsOf: self pricedCatalog.
	cartWithOneElement add: 'Book A'.
	
	^cartWithOneElement ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:58:30' prior: 50647592!
cartWithOneItem
	
	| cartWithOneItem |
	
	cartWithOneItem := Cart acceptingItemsOf: self pricedCatalog.
	cartWithOneItem add: 'Book A'.
	
	^cartWithOneItem ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:58:40' prior: 50647309!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook cartWithOneElement |
	
	salesBook := OrderedCollection new.
	
	cartWithOneElement := self cartWithOneItem.
	
	self assert: 25 equals: (Cashier 
						withCart: cartWithOneElement 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:58:41' prior: 50647609!
test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self assert: 25 equals: (Cashier 
						withCart: self cartWithOneItem 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 25).! !

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/11/2023 23:58:43'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:59:02'!
cartWithManyItems

	|cartWithManyItems|
	
	cartWithManyItems := Cart acceptingItemsOf: self pricedCatalog.
	cartWithManyItems add: 'Book A'.
	cartWithManyItems add: 2 of: 'Book B'.
	
	^cartWithManyItems 
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:59:09' prior: 50647356!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook cartWithManyItems card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	
	cartWithManyItems := self cartWithManyItems .
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: cartWithManyItems 
							chargingFrom: card 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:59:10' prior: 50647658!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook card merchantProcessorSimulator |
	
	card := self validCreditCard.
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: self cartWithManyItems 
							chargingFrom: card 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/11/2023 23:59:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/11/2023 23:59:59' prior: 50647413!
test04CannotCheckoutChargingExpiredCard

	|salesBook cart expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	cart := self cartWithOneItem .
		
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: cart 
				chargingFrom: expiredCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:00:00' prior: 50647704!
test04CannotCheckoutChargingExpiredCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 1234 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: self cartWithOneItem 
				chargingFrom: expiredCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 00:00:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:00:08' prior: 50647467!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook cart expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	cart := self cartWithOneItem .

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:00:09' prior: 50647756!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:00:20' prior: 50647520!
test06CannotCheckoutChargingStolenCard

	|salesBook cart expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	cart := self cartWithOneItem .

	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: cart 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:00:20' prior: 50647805!
test06CannotCheckoutChargingStolenCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (January of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/12/2023 00:00:23'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 00:00:23'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:01:34' prior: 50647830!
test06CannotCheckoutChargingStolenCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:01:37' prior: 50647781!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (April of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:01:54' prior: 50647900!
test06CannotCheckoutChargingStolenCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (November of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 00:01:56'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:02:00' prior: 50647924!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 999 validUntil: (November of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:02:25' prior: 50647948!
test06CannotCheckoutChargingStolenCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := self validCreditCard .
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:02:27' prior: 50647999!
test06CannotCheckoutChargingStolenCard

	|salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: self validCreditCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:01:54' prior: 50648022!
test06CannotCheckoutChargingStolenCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := CreditCard withNumber: 888 validUntil: (November of: 2023).
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 00:02:54'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:15'!
expiredCreditCard

	^ CreditCard withNumber: 1234 validUntil: (April of: 2023)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:15' prior: 50647729!
test04CannotCheckoutChargingExpiredCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := self expiredCreditCard.
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: self cartWithOneItem 
				chargingFrom: expiredCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 00:03:17'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:39'!
creditCardWithoutFunds

	^ CreditCard withNumber: 999 validUntil: (November of: 2023)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:39' prior: 50647975!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := self creditCardWithoutFunds.
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:52'!
stolenCreditCard

	^ CreditCard withNumber: 888 validUntil: (November of: 2023)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:52' prior: 50648043!
test06CannotCheckoutChargingStolenCard

	|salesBook expiredCard merchantProcessorSimulator |
	
	expiredCard := self stolenCreditCard.
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: expiredCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:03:59' prior: 50648137!
test06CannotCheckoutChargingStolenCard

	|salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: self stolenCreditCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:03' prior: 50648108!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: self creditCardWithoutFunds 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:05' prior: 50648076!
test04CannotCheckoutChargingExpiredCard

	|salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
	
	self 
		should: [(Cashier 
				withCart: self cartWithOneItem 
				chargingFrom: self expiredCreditCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: merchantProcessorSimulator) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:09' prior: 50647680!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook merchantProcessorSimulator |
	
	salesBook := OrderedCollection new.
	
	merchantProcessorSimulator := MerchantProcessor new.
		
	self assert: 45 equals: (Cashier 
							withCart: self cartWithManyItems 
							chargingFrom: self validCreditCard 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: merchantProcessorSimulator) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:18' prior: 50648160!
test06CannotCheckoutChargingStolenCard

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: self stolenCreditCard 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: MerchantProcessor new) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:20' prior: 50648181!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self 
		should: [(Cashier withCart: self cartWithOneItem 
					     chargingFrom: self creditCardWithoutFunds 
					     onDate: (June of: 2023) 
					     registeringOn: salesBook
					     withMerchantProcessor: MerchantProcessor new) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:23' prior: 50648203!
test04CannotCheckoutChargingExpiredCard

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self 
		should: [(Cashier 
				withCart: self cartWithOneItem 
				chargingFrom: self expiredCreditCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook 
				withMerchantProcessor: MerchantProcessor new) checkout] 
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta vencida.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:04:25' prior: 50648225!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self assert: 45 equals: (Cashier 
							withCart: self cartWithManyItems 
							chargingFrom: self validCreditCard 
							onDate: (June of: 2023) 
							registeringOn: salesBook
							withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:05:06' prior: 50648302!
test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self assert: 45 equals: (Cashier 
						withCart: self cartWithManyItems 
						chargingFrom: self validCreditCard 
						onDate: (June of: 2023) 
						registeringOn: salesBook
						withMerchantProcessor: MerchantProcessor new) checkout.
	self assert: salesBook equals: (OrderedCollection with: 45).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:05:33' prior: 50648264!
test05CannotCheckoutChargingCardWithoutFunds

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self 
		should: [(Cashier 
				withCart: self cartWithOneItem 
				chargingFrom: self creditCardWithoutFunds 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: MerchantProcessor new) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta sin saldo.'.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FP 6/12/2023 00:06:02' prior: 50648245!
test06CannotCheckoutChargingStolenCard

	|salesBook |
	
	salesBook := OrderedCollection new.
	
	self 
		should: [(Cashier 
				withCart: self cartWithOneItem 
				chargingFrom: self stolenCreditCard 
				onDate: (June of: 2023) 
				registeringOn: salesBook
				withMerchantProcessor: MerchantProcessor new) checkout] 
		raise:  Error 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: 'Tarjeta robada.'.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/12/2023 00:08:10'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 00:08:10'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'FP 6/12/2023 00:09:28'!
sumItemsPrices

	^ cart items 
		inject: 0
		into: [:subtotal :anItem | subtotal + cart pricedCatalog at: anItem]! !
!Cashier methodsFor: 'checkout' stamp: 'FP 6/12/2023 00:09:28' prior: 50645856!
checkout
	
	|total| 
	
	total := self sumItemsPrices.
	
	merchantProcessor debit: total from: card.
	salesBook add: total.
	
	^total! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 00:10:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 00:11:50'!
PASSED!

----QUIT----(12 June 2023 00:11:54) CuisUniversity-5832.image priorSource: 10048029!

----STARTUP---- (12 June 2023 15:49:17) as /Users/fabrizioprida/Desktop/1erCuat2023/Inge1/macos64_/CuisUniversity-5832.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithOneItemReturnsTicketWithItemsPrice stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyItemsReturnsTicketWithSumOfPrices stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CashierTest #test04CannotCheckoutChargingExpiredCard stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CashierTest #test05CannotCheckoutChargingCardWithoutFunds stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

!testRun: #CashierTest #test06CannotCheckoutChargingStolenCard stamp: 'FP 6/12/2023 15:49:25'!
PASSED!

----SNAPSHOT----(12 June 2023 15:49:29) CuisUniversity-5832.image priorSource: 10139951!